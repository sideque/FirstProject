<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Details</title>
  <style>
    /* Main Layout Adjustments */
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 15px;
    }

    /* Hero Section */
    .hero-wrap {
      height: 300px;
      display: flex;
      align-items: center;
      background-size: cover;
      background-position: center;
      position: relative;
    }

    .hero-wrap::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.4);
    }

    .slider-text {
      position: relative;
      z-index: 2;
    }

    .breadcrumbs {
      font-size: 14px;
      margin-bottom: 10px;
      color: #fff;
    }

    .breadcrumbs a {
      color: #fff;
      text-decoration: none;
    }

    .bread {
      color: #fff;
      font-size: 30px;
      font-weight: 700;
    }

    /* Product Detail Layout */
    .product-detail-row {
      display: flex;
      flex-wrap: wrap;
      margin: 40px 0;
    }

    .product-images-col {
      width: 50%;
      padding: 0 15px;
    }

    .product-info-col {
      width: 50%;
      padding: 0 15px;
    }

    /* Product Image Gallery */
    .product-gallery {
      position: relative;
      margin-bottom: 30px;
    }

    .main-image {
      width: 100%;
      height: 400px;
      object-fit: contain;
      border-radius: 12px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
    }

    .thumbnails {
      display: flex;
      gap: 10px;
      margin-top: 20px;
      overflow-x: auto;
      padding-bottom: 10px;
    }

    .thumbnail {
      width: 80px;
      height: 80px;
      object-fit: contain;
      border-radius: 8px;
      cursor: pointer;
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }

    .thumbnail:hover, .thumbnail.active {
      border-color: #82ae46;
    }

    /* Product Info Styling */
    .product-title {
      font-size: 28px;
      font-weight: 600;
      margin-bottom: 15px;
      color: #333;
    }

    .product-brand {
      font-size: 16px;
      color: #666;
      margin-bottom: 20px;
      display: block;
    }

    .product-price {
      font-size: 26px;
      font-weight: 600;
      color: #82ae46;
      margin-bottom: 10px;
    }

    .product-price .old-price {
      text-decoration: line-through;
      color: #999;
      font-size: 18px;
      margin-left: 10px;
    }
      
    .product-offer {
      display: inline-block;
      background: #e63946;
      color: white;
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 14px;
      margin-left: 10px;
    }

    .offers-section {
      margin-bottom: 20px;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
    }

    .offers-title {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 10px;
      color: #333;
    }

    .offer-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #eee;
    }

    .offer-item:last-child {
      border-bottom: none;
    }

    .offer-name {
      font-size: 14px;
      color: #555;
    }

    .offer-details {
      font-size: 14px;
      font-weight: 500;
      color: #82ae46;
    }

    .product-description {
      margin-bottom: 30px;
      line-height: 1.7;
      color: #555;
    }

    /* Specification Styling */
    .specifications {
      margin-bottom: 30px;
    }

    .spec-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 15px;
      color: #333;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
    }

    .spec-list {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }

    .spec-item {
      display: flex;
      flex-direction: column;
    }

    .spec-name {
      font-size: 14px;
      color: #666;
      margin-bottom: 5px;
    }

    .spec-value {
      font-size: 15px;
      font-weight: 500;
      color: #333;
    }

    /* Quantity Selector */
    .quantity-container {
      display: flex;
      align-items: center;
      margin-bottom: 30px;
    }

    .quantity-label {
      margin-right: 15px;
      font-weight: 500;
    }

    .quantity-input-group {
      display: flex;
      align-items: center;
      border-radius: 25px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
    }

    .quantity-btn {
      width: 40px;
      height: 40px;
      background: #f1f3f5;
      border: none;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .quantity-btn:hover {
      background: #e9ecef;
    }

    .quantity-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .quantity-input {
      width: 60px;
      height: 40px;
      border: none;
      text-align: center;
      font-size: 16px;
      background: #f8f9fa;
    }

    .quantity-input:focus {
      outline: none;
    }

    /* Out of Stock Message */
    .out-of-stock {
      color: #e63946;
      font-weight: 600;
      margin-bottom: 30px;
    }

    /* Action Buttons */
    .product-actions {
      display: flex;
      gap: 15px;
      margin-bottom: 30px;
    }

    .cart-btn, .wish-btn {
      padding: 12px 25px;
      border-radius: 30px;
      font-weight: 600;
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 1px;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
    }

    .cart-btn {
      background: #f8f9fa;
      color: #333;
      border: 2px solid #82ae46;
    }

    .cart-btn:hover {
      background: #82ae46;
      color: white;
      transform: translateY(-2px);
    }

    .cart-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
    }

    .wish-btn {
      background: #82ae46;
      color: white;
    }

    .wish-btn:hover {
      background: #6d9338;
      transform: translateY(-2px);
    }

    /* Related Products */
    .related-products {
      margin: 60px 0;
    }

    .section-title {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 30px;
      text-align: center;
      color: #333;
    }

    .product-grid {
      display: flex;
      flex-wrap: wrap;
      margin: 0 -15px;
    }

    .product-item {
      width: 25%;
      padding: 0 15px;
      margin-bottom: 30px;
    }

    .product {
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
    }

    .product:hover {
      transform: translateY(-5px);
    }

    .img-prod {
      position: relative;
      display: block;
    }

    .img-prod img {
      width: 100%;
      height: 200px;
      object-fit: contain;
      padding: 10px;
    }

    .img-prod .status {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #e63946;
      color: white;
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 12px;
    }

    .img-prod .overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.2);
      opacity: 0;
      transition: all 0.3s ease;
    }

    .img-prod:hover .overlay {
      opacity: 1;
    }

    .product .text {
      padding: 15px;
    }

    .product .cat {
      font-size: 12px;
      color: #666;
      margin-bottom: 10px;
    }

    .product h3 {
      font-size: 16px;
      margin-bottom: 10px;
    }

    .product h3 a {
      color: #333;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .product h3 a:hover {
      color: #82ae46;
    }

    .product .price {
      font-size: 18px;
      font-weight: 600;
      color: #82ae46;
    }

    .bottom-area {
      display: flex;
      justify-content: space-between;
      margin-top: 15px;
    }

    .product .btn {
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .product .add-to-cart {
      background: #f8f9fa;
      color: #333;
      border: 1px solid #82ae46;
      width: 48%;
      text-align: center;
    }

    .product .add-to-cart:hover {
      background: #82ae46;
      color: white;
    }

    .product .add-to-cart:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .product .wishlist {
      background: #82ae46;
      color: white;
      width: 48%;
      text-align: center;
    }

    .product .wishlist:hover {
      background: #6d9338;
    }

    /* Tabs for Description and Reviews */
    .product-tabs {
      margin: 40px 0;
    }

    .tabs-nav {
      display: flex;
      border-bottom: 1px solid #eee;
      margin-bottom: 20px;
    }

    .tab-btn {
      padding: 12px 25px;
      border: none;
      background: transparent;
      font-weight: 600;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .tab-btn.active {
      color: #82ae46;
    }

    .tab-btn.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 2px;
      background: #82ae46;
    }

    .tab-content {
      display: none;
      padding: 20px 0;
      line-height: 1.7;
      color: #555;
    }

    .tab-content.active {
      display: block;
    }

    /* Review Section */
    .review-item {
      margin-bottom: 30px;
      padding-bottom: 30px;
      border-bottom: 1px solid #eee;
    }

    .review-item:last-child {
      border-bottom: none;
    }

    .reviewer-info {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
    }

    .reviewer-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      overflow: hidden;
      margin-right: 15px;
    }

    .reviewer-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .reviewer-name {
      font-weight: 600;
      font-size: 16px;
      margin-bottom: 5px;
      color: #333;
    }

    .review-date {
      font-size: 12px;
      color: #666;
    }

    .review-rating {
      color: #ffc107;
      font-size: 14px;
      margin-bottom: 10px;
    }

    .review-text {
      line-height: 1.7;
      color: #555;
    }

    /* Zoom Styles */
    .zoom-container {
      position: relative;
      display: inline-block;
      overflow: hidden;
    }

    .zoom-image {
      display: block;
      max-width: 100%;
      height: auto;
    }

    .zoom-lens {
      position: absolute;
      border: 2px solid #fff;
      border-radius: 8px;
      cursor: crosshair;
      width: 150px;
      height: 150px;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s;
      background: rgba(255, 255, 255, 0.3);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .zoom-container:hover .zoom-lens {
      opacity: 1;
    }

    /* Responsive */
    @media (max-width: 991px) {
      .product-images-col, .product-info-col {
        width: 100%;
        margin-bottom: 30px;
      }

      .product-item {
        width: 50%;
      }

      .spec-list {
        grid-template-columns: 1fr;
      }
    }

    @media (max-width: 767px) {
      .product-item {
        width: 100%;
      }

      .product-actions {
        flex-direction: column;
      }

      .cart-btn, .wish-btn {
        width: 100%;
      }

      .main-image {
        height: 300px;
      }

      .tabs-nav {
        overflow-x: auto;
        white-space: nowrap;
        padding-bottom: 10px;
      }
    }
  </style>
</head>
<body>
  <%- include("../../views/partials/user/header") %>

  <div class="hero-wrap hero-bread" style="background-image: url('/images/ss4.jpg');">
    <div class="container">
      <div class="row no-gutters slider-text align-items-center justify-content-center">
        <div class="col-md-9 ftco-animate text-center">
          <p class="breadcrumbs"><span class="mr-2"><a href="/">Home</a></span> <span class="mr-2"><a href="/shop">Shop</a></span> <span>Product</span></p>
          <h1 class="mb-0 bread">Product Details</h1>
        </div>
      </div>
    </div>
  </div>

  <section class="ftco-section bg-light">
    <div class="container">
      <div class="product-detail-row">
        <div class="product-images-col">
          <div class="product-gallery zoom-container">
            <img 
                src="<%= product.productImage && product.productImage.length > 0 
                        ? '/uploads/product-images/' + product.productImage[0] 
                        : '/images/placeholder.jpg' %>" 
                alt="<%= product.productName || 'Product Image' %>" 
                class="main-image zoom-image" 
                id="mainImage"
                onerror="this.src='/images/placeholder.jpg'; console.log('Main image load failed for <%= product.productName %>');">
            <div class="zoom-lens"></div>
           <div class="thumbnails">
              <% if (product.productImage && Array.isArray(product.productImage) && product.productImage.length > 0) { %>
                <% product.productImage.forEach((image, index) => { %>
                 <img 
                    src="/uploads/product-images/<%= image %>" 
                    alt="<%= product.productName || 'Product' %> thumbnail <%= index + 1 %>" 
                    class="thumbnail <%= index === 0 ? 'active' : '' %>" 
                    style="width: 60px; height: 60px; object-fit: cover; margin: 5px;"
                    onerror="this.src='/images/default-thumbnail.jpg'; console.log('Thumbnail load failed for <%= product.productName %> - image <%= index + 1 %>');">
                <% }) %>
              <% } else { %>
                <p>No additional images available.</p>
              <% } %>
            </div>

          </div>
        </div>

        <div class="product-info-col">
          <h2 class="product-title"><%= product.productName %></h2>
          <span class="product-brand"><%= product.brand ? product.brand.name : 'N/A' %></span>
          <div class="product-price">
            ₹<%= product.salePrice.toLocaleString() %>
            <% if (product.regularPrice && product.salePrice < product.regularPrice) { %>
              <span class="old-price">₹<%= product.regularPrice.toLocaleString() %></span>
              <% if (product.productOffer && product.productOffer > 0) { %>
                <span class="product-offer"><%= product.productOffer %>% Off</span>
              <% } %>
            <% } %>
          </div>

          <!-- Offers Section -->
          <% if (allOffers && allOffers.length > 0) { %>
            <div class="offers-section">
              <h3 class="offers-title">Available Offers</h3>
              <% allOffers.forEach(offer => { %>
                <div class="offer-item">
                  <span class="offer-name"><%= offer.offerName %></span>
                  <span class="offer-details"><%= offer.offerAmount %>% Off</span>
                </div>
              <% }) %>
            </div>
          <% } %>

          <p class="product-description">
            <%= product.description %>
          </p>

          <div class="specifications">
            <h3 class="spec-title">Specifications</h3>
            <div class="spec-list">
              <% if (product.processor || product.ram || product.storage || product.camera) { %>
                <% if (product.processor) { %>
                  <div class="spec-item">
                    <span class="spec-name">Processor</span>
                    <span class="spec-value"><%= product.processor %></span>
                  </div>
                <% } %>
                <% if (product.ram) { %>
                  <div class="spec-item">
                    <span class="spec-name">RAM</span>
                    <span class="spec-value"><%= product.ram %></span>
                  </div>
                <% } %>
                <% if (product.storage) { %>
                  <div class="spec-item">
                    <span class="spec-name">Storage</span>
                    <span class="spec-value"><%= product.storage %></span>
                  </div>
                <% } %>
                <% if (product.camera) { %>
                  <div class="spec-item">
                    <span class="spec-name">Camera</span>
                    <span class="spec-value"><%= product.camera %></span>
                  </div>
                <% } %>
              <% } else { %>
                <p>No specifications available.</p>
              <% } %>
            </div>
          </div>

          <% if (product.quantity <= 0 || product.status === 'out of stock' || product.isBlocked) { %>
            <div class="out-of-stock">Out of Stock</div>
          <% } else { %>
            <div class="quantity-container">
              <span class="quantity-label">Quantity:</span>
              <div class="quantity-input-group">
                <button class="quantity-btn" id="decreaseBtn" onclick="decreaseQuantity()">-</button>
                <input type="number" min="1" max="<%= Math.min(product.quantity, 5) %>" value="1" class="quantity-input" id="quantity" readonly>
                <button class="quantity-btn" id="increaseBtn" onclick="increaseQuantity()">+</button>
              </div>
              <span style="margin-left: 15px; color: #666;">Available: <%= product.quantity %></span>
            </div>

            <div class="product-actions">
              <input type="hidden" id="cartQuantity" value="1">

              <button type="button" class="cart-btn" data-id="<%= product._id %>" style="width: 48%;">
                <i class="ion-ios-cart"></i> Add to Cart
              </button>

              <button class="wish-btn" style="width: 48%;" data-id="<%= product._id %>">
                <i class="fa fa-heart"></i> Add to Wishlist
              </button>
            </div>
          <% } %>

          <div class="additional-info">
            <p><strong>Availability:</strong> 
              <% if (product.quantity <= 0 || product.status === 'out of stock' || product.isBlocked) { %>
                Out of Stock
              <% } else { %>
                In Stock
              <% } %>
            </p>
            <p><strong>Category:</strong> <%= product.category ? product.category.name : 'N/A' %></p>
            <% if (product.warranty) { %>
              <p><strong>Warranty:</strong> <%= product.warranty %></p>
            <% } %>
          </div>
        </div>
      </div>

      <div class="product-tabs">
        <div class="tabs-nav">
          <button class="tab-btn active" onclick="openTab(event, 'description')">Description</button>
          <button class="tab-btn" onclick="openTab(event, 'specifications')">Specifications</button>
          <button class="tab-btn" onclick="openTab(event, 'reviews')">Reviews</button>
        </div>
        <div id="description" class="tab-content active">
          <p><%= product.description %></p>
          <% if (product.features && product.features.length > 0) { %>
            <h4>Key Features:</h4>
            <ul>
              <% product.features.forEach(feature => { %>
                <li><%= feature %></li>
              <% }) %>
            </ul>
          <% } %>
        </div>
        <div id="specifications" class="tab-content">
          <div class="spec-list" style="grid-template-columns: repeat(1, 1fr);">
            <% if (product.processor || product.ram || product.storage || product.camera) { %>
              <% if (product.processor) { %>
                <div class="spec-item" style="flex-direction: row; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                  <span class="spec-name" style="font-weight: 600;">Processor</span>
                  <span class="spec-value"><%= product.processor %></span>
                </div>
              <% } %>
              <% if (product.ram) { %>
                <div class="spec-item" style="flex-direction: row; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                  <span class="spec-name" style="font-weight: 600;">RAM</span>
                  <span class="spec-value"><%= product.ram %></span>
                </div>
              <% } %>
              <% if (product.storage) { %>
                <div class="spec-item" style="flex-direction: row; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                  <span class="spec-name" style="font-weight: 600;">Storage</span>
                  <span class="spec-value"><%= product.storage %></span>
                </div>
              <% } %>
              <% if (product.camera) { %>
                <div class="spec-item" style="flex-direction: row; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                  <span class="spec-name" style="font-weight: 600;">Camera</span>
                  <span class="spec-value"><%= product.camera %></span>
                </div>
              <% } %>
            <% } else { %>
              <p>No specifications available.</p>
            <% } %>
          </div>
        </div>
        <div id="reviews" class="tab-content">
          <% if (product.reviews && product.reviews.length > 0) { %>
            <% product.reviews.forEach(review => { %>
              <div class="review-item">
                <div class="reviewer-info">
                  <div class="reviewer-avatar">
                    <img src="/images/user-placeholder.jpg" alt="<%= review.user.name %>">
                  </div>
                  <div>
                    <h4 class="reviewer-name"><%= review.user.name %></h4>
                    <p class="review-date"><%= new Date(review.date).toLocaleDateString() %></p>
                  </div>
                </div>
                <div class="review-rating">
                  <% for(let i = 0; i < 5; i++) { %>
                    <% if (i < review.rating) { %>
                      <i class="ion-ios-star"></i>
                    <% } else { %>
                      <i class="ion-ios-star-outline"></i>
                    <% } %>
                  <% } %>
                </div>
                <p class="review-text"><%= review.text %></p>
              </div>
            <% }) %>
          <% } else { %>
            <p>No reviews yet. Be the first to review this product!</p>
          <% } %>
        </div>
      </div>

      <div class="related-products">
        <h2 class="section-title">Related Products</h2>
        <div class="product-grid">
          <% if (relatedProducts && relatedProducts.length > 0) { %>
            <% relatedProducts.forEach(relatedProduct => { %>
              <div class="product-item">
                <div class="product">
                  <a href="/product?id=<%= relatedProduct._id %>" class="img-prod">
                    <img 
                      src="<%= relatedProduct.productImage && relatedProduct.productImage.length > 0 
                              ? '/uploads/product-images/' + relatedProduct.productImage[0] 
                              : 'https://via.placeholder.com/300x300?text=No+Image' %>" 
                      alt="<%= relatedProduct.productName %> mobile phone"
                      style="height: 320px; width: 100%; object-fit: contain; padding: 10px;"
                      onerror="this.onerror=null; this.src='https://via.placeholder.com/300x300?text=Error'; console.log('Image load failed for <%= relatedProduct.productName %>');">
                    
                    <% if (relatedProduct.productOffer && relatedProduct.productOffer > 0) { %>
                      <span class="status"><%= relatedProduct.productOffer %>% Off</span>
                    <% } %>
                    
                    <div class="overlay"></div>
                  </a>
                  <div class="text">
                    <div class="cat"><%= relatedProduct.brand ? relatedProduct.brand.name : 'N/A' %></div>
                    <h3><a href="/product?id=<%= relatedProduct._id %>"><%= relatedProduct.productName %></a></h3>
                    <div class="price">
                      ₹<%= relatedProduct.salePrice.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %>
                      <% if (relatedProduct.originalPrice && relatedProduct.salePrice < relatedProduct.originalPrice) { %>
                        <span class="old-price">₹<%= relatedProduct.originalPrice.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span>
                      <% } %>
                    </div>
                    <div class="bottom-area">
                      <a href="#" class="btn add-to-cart" data-id="<%= relatedProduct._id %>" data-quantity="<%= relatedProduct.quantity %>">Add to cart</a>
                      <a href="#" class="btn wishlist" data-id="<%= relatedProduct._id %>">
                        <i class="fa fa-heart"></i> Wishlist
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p>No related products available.</p>
          <% } %>
        </div>
      </div>


    </div>
  </section>

  <%- include("../../views/partials/user/footer") %>

  <script>
    function initializeZoom() {
      const containers = document.querySelectorAll('.zoom-container');
      containers.forEach(container => {
        const img = container.querySelector('.zoom-image');
        const lens = container.querySelector('.zoom-lens');

        if (!img.complete) {
          img.addEventListener('load', () => setupZoom(container, img, lens));
        } else {
          setupZoom(container, img, lens);
        }

        container.addEventListener('mousemove', (e) => {
          moveLens(e, container, img, lens);
        });

        container.addEventListener('mouseleave', () => {
          lens.style.opacity = '0';
        });

        container.addEventListener('mouseenter', () => {
          lens.style.opacity = '1';
        });
      });
    }

    function setupZoom(container, img, lens) {
      const zoomFactor = 2;
      const lensSize = { width: parseInt(getComputedStyle(lens).width), height: parseInt(getComputedStyle(lens).height) };

      lens.style.backgroundImage = `url(${img.src})`;
      lens.style.backgroundRepeat = 'no-repeat';

      const imgRect = img.getBoundingClientRect();
      lens.style.backgroundSize = `${imgRect.width * zoomFactor}px ${imgRect.height * zoomFactor}px`;
    }

    function moveLens(e, container, img, lens) {
      const zoomFactor = 2;
      const lensSize = { width: parseInt(getComputedStyle(lens).width), height: parseInt(getComputedStyle(lens).height) };
      const imgRect = img.getBoundingClientRect();
      const containerRect = container.getBoundingClientRect();

      let posX = e.clientX - containerRect.left;
      let posY = e.clientY - containerRect.top;

      let lensX = posX - lensSize.width / 2;
      let lensY = posY - lensSize.height / 2;

      lensX = Math.max(0, Math.min(lensX, imgRect.width - lensSize.width));
      lensY = Math.max(0, Math.min(lensY, imgRect.height - lensSize.height));

      lens.style.left = `${lensX}px`;
      lens.style.top = `${lensY}px`;

      const bgPosX = -(lensX * zoomFactor);
      const bgPosY = -(lensY * zoomFactor);
      lens.style.backgroundPosition = `${bgPosX}px ${bgPosY}px`;
    }

    function changeMainImage(src) {
      const mainImage = document.getElementById('mainImage');
      mainImage.src = src;

      document.querySelectorAll('.thumbnail').forEach(thumb => {
        thumb.classList.remove('active');
        if (thumb.src === src) {
          thumb.classList.add('active');
        }
      });

      initializeZoom();
    }

    document.querySelectorAll('.thumbnail').forEach(thumb => {
      thumb.addEventListener('click', () => {
        changeMainImage(thumb.src);
      });
    });

    function increaseQuantity() {
      const quantityInput = document.getElementById('quantity');
      const increaseBtn = document.getElementById('increaseBtn');
      const maxQuantity = parseInt(quantityInput.max);
      const currentValue = parseInt(quantityInput.value);

      if (currentValue < maxQuantity) {
        quantityInput.value = currentValue + 1;
        updateHiddenQuantityInputs();
      }

      increaseBtn.disabled = parseInt(quantityInput.value) >= maxQuantity;
      document.getElementById('decreaseBtn').disabled = parseInt(quantityInput.value) <= 1;
    }

    function decreaseQuantity() {
      const quantityInput = document.getElementById('quantity');
      const decreaseBtn = document.getElementById('decreaseBtn');
      const currentValue = parseInt(quantityInput.value);

      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        updateHiddenQuantityInputs();
      }

      decreaseBtn.disabled = parseInt(quantityInput.value) <= 1;
      document.getElementById('increaseBtn').disabled = parseInt(quantityInput.value) >= parseInt(quantityInput.max);
    }

    function updateHiddenQuantityInputs() {
      const quantity = document.getElementById('quantity').value;
      document.getElementById('cartQuantity').value = quantity;
    }

    document.getElementById('quantity')?.addEventListener('input', function(e) {
      e.preventDefault();
      this.value = this.value;
    });

    function openTab(evt, tabName) {
      let tabcontent = document.getElementsByClassName("tab-content");
      for (let i = 0; i < tabcontent.length; i++) {
        tabcontent[i].classList.remove("active");
      }

      let tablinks = document.getElementsByClassName("tab-btn");
      for (let i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("active");
      }

      document.getElementById(tabName).classList.add("active");
      evt.currentTarget.classList.add("active");
    }

  // Add to Cart Function
  async function addToCart(productId, cartBtn) {
    const quantity = parseInt(document.getElementById('cartQuantity').value);
    const maxQuantity = parseInt(document.getElementById('quantity').max);
    const originalText = cartBtn.textContent;

    // Validate quantity
    if (quantity > maxQuantity) {
      Swal.fire({
        icon: 'error',
        title: 'Out of Stock',
        text: `Only ${maxQuantity} items available in stock.`,
        confirmButtonColor: '#82ae46',
      });
      return;
    }

    // Set loading state
    cartBtn.classList.add('loading');
    cartBtn.disabled = true;
    cartBtn.textContent = 'Adding...';

    try {
      const response = await fetch('/cart/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId, quantity, fromWishlist: false }),
      });

      const data = await response.json();

      // Reset button state
      cartBtn.classList.remove('loading');
      cartBtn.disabled = false;
      cartBtn.textContent = originalText;

      if (response.ok && data.success) {
        Swal.fire({
          title: 'Success!',
          text: 'Item has been added to your cart successfully!',
          icon: 'success',
          confirmButtonText: 'Go to Cart',
          showCancelButton: true,
          cancelButtonText: 'Continue Shopping',
          confirmButtonColor: '#82ae46',
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = '/cart';
          }
        });
      } else {
        Swal.fire({
          title: 'Error!',
          text: data.message || 'Failed to add item to cart',
          icon: 'error',
          confirmButtonText: 'OK',
          confirmButtonColor: '#82ae46',
        });
      }
    } catch (error) {
      cartBtn.classList.remove('loading');
      cartBtn.disabled = false;
      cartBtn.textContent = originalText;

      console.error('Error adding to cart:', error);
      Swal.fire({
        title: 'Error!',
        text: 'Error adding to cart. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK',
        confirmButtonColor: '#82ae46',
      });
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    initializeZoom();

    // Add to Cart button event listener
    const cartButtons = document.querySelectorAll('.cart-btn');
    cartButtons.forEach(cartBtn => {
      cartBtn.addEventListener('click', () => {
        const productId = cartBtn.dataset.id;
        addToCart(productId, cartBtn);
      });
    });

    // Add to Wishlist button event listener
    const wishBtn = document.querySelector('.wish-btn');
    if (wishBtn) {
      wishBtn.addEventListener('click', function() {
        const productId = this.dataset.id;

        fetch('/addtowish', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Wishlist',
              text: data.message,
              confirmButtonColor: '#82ae46',
              timer: 2000,
              showConfirmButton: false
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to add to wishlist',
              confirmButtonColor: '#82ae46',
            });
          }
        })
        .catch(error => {
          console.error('Error adding to wishlist:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again later.',
            confirmButtonColor: '#82ae46',
          });
        });
      });
    }

    // Add to Wishlist for related products
    const wishlistBtns = document.querySelectorAll('.wishlist');
    wishlistBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        const productId = this.dataset.id;

        fetch('/addtowish', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Wishlist',
              text: data.message,
              confirmButtonColor: '#82ae46',
              timer: 2000,
              showConfirmButton: false
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to add to wishlist',
              confirmButtonColor: '#82ae46',
            });
          }
        })
        .catch(error => {
          console.error('Error adding to wishlist:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again later.',
            confirmButtonColor: '#82ae46',
          });
        });
      });
    });

    // Add to Cart for related products
    const addToCartBtns = document.querySelectorAll('.add-to-cart');
    addToCartBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        const productId = this.dataset.id;
        const availableStock = parseInt(this.dataset.quantity);

        if (availableStock <= 0) {
          Swal.fire({
            icon: 'error',
            title: 'Out of Stock',
            text: 'This item is out of stock and cannot be added to the cart.',
            confirmButtonColor: '#82ae46',
          });
          return;
        }

        btn.classList.add('loading');
        btn.disabled = true;
        const originalText = btn.textContent;
        btn.textContent = 'Adding...';

        fetch('/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId, quantity: 1, fromWishlist: false }),
        })
        .then(response => response.json())
        .then(data => {
          btn.classList.remove('loading');
          btn.disabled = false;
          btn.textContent = originalText;

          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Cart',
              text: 'Item has been added to your cart successfully!',
              confirmButtonColor: '#82ae46',
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to add item to cart',
              confirmButtonColor: '#82ae46',
            });
          }
        })
        .catch(error => {
          btn.classList.remove('loading');
          btn.disabled = false;
          btn.textContent = originalText;
          console.error('Error adding to cart:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again later.',
            confirmButtonColor: '#82ae46',
          });
        });
      });
    });

    // Check for error in URL params (e.g., insufficient stock)
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('error') === 'insufficient_stock') {
      Swal.fire({
        icon: 'error',
        title: 'Out of Stock',
        text: `Only <%= product.quantity %> items available in stock.`,
        confirmButtonColor: '#82ae46',
      });
      window.history.replaceState({}, document.title, '/product?id=<%= product._id %>');
    }
  });
</script>
</body>
</html>