<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>

    /* Add this to your existing style section */
.order-tracking {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.tracking-timeline {
  display: flex;
  justify-content: space-between;
  margin: 30px 0;
  position: relative;
}

.tracking-timeline:before {
  content: '';
  position: absolute;
  top: 25px;
  left: 0;
  height: 4px;
  width: 100%;
  background: #eee;
  z-index: 1;
}

.timeline-item {
  position: relative;
  z-index: 2;
  flex: 1;
  text-align: center;
  padding: 0 10px;
}

.timeline-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: #eee;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 15px;
  color: #aaa;
  font-size: 20px;
  border: 4px solid #fff;
}

.timeline-item.active .timeline-icon {
  background: #82ae46;
  color: white;
}

.timeline-item.pending .timeline-icon {
  background: #f0ad4e;
  color: white;
}

.timeline-item.cancelled .timeline-icon {
  background: #d9534f;
  color: white;
}

.timeline-content h4 {
  font-size: 16px;
  margin-bottom: 5px;
  color: #333;
}

.timeline-content p {
  font-size: 14px;
  color: #666;
  margin-bottom: 5px;
}

.tracking-id {
  background: #f8f9fa;
  padding: 5px 8px;
  border-radius: 4px;
  display: inline-block;
  font-size: 13px;
}

@media (max-width: 768px) {
  .tracking-timeline {
    flex-direction: column;
    margin: 20px 0;
  }
  
  .tracking-timeline:before {
    height: 100%;
    width: 4px;
    top: 0;
    left: 25px;
  }
  
  .timeline-item {
    display: flex;
    align-items: center;
    text-align: left;
    margin-bottom: 20px;
  }
  
  .timeline-icon {
    margin: 0 20px 0 0;
  }
  
  .timeline-content {
    flex: 1;
  }
}
    .order-details-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    .order-title {
      font-size: 24px;
      color: #333;
      margin-bottom: 20px;
    }
    .order-info, .order-items, .address-info {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 20px;
      margin-bottom: 20px;
    }
    .order-info p, .address-info p {
      margin: 10px 0;
      color: #666;
    }
    .order-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 500;
      color: white;
      display: inline-block;
    }
    .status-processing { background-color: #f0ad4e; }
    .status-shipped { background-color: #5bc0de; }
    .status-delivered { background-color: #5cb85c; }
    .status-cancelled { background-color: #d9534f; }
    .status-return-request { background-color: #6c757d; }
    .status-returned { background-color: #6c757d; }
    .item-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 0;
      border-bottom: 1px solid #eee;
      flex-wrap: wrap;
    }
    .item-header {
      font-weight: 600;
      color: #666;
      border-bottom: 2px solid #82ae46;
    }
    .item-row > div {
      flex: 1;
      min-width: 100px;
      text-align: center;
    }
    .product-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 4px;
    }
    .product-info {
      text-align: left;
    }
    .product-name {
      font-weight: 500;
      color: #333;
    }
    .product-meta {
      color: #666;
      font-size: 14px;
    }
    .price-col {
      font-weight: 500;
      color: #333;
    }
    .action-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      margin-top: 20px;
    }
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      color: white;
      font-weight: 500;
      text-align: center;
    }
    .btn-primary { background-color: #82ae46; }
    .btn-danger { background-color: #dc3545; }
    .btn-secondary { background-color: #6c757d; }
    @media (max-width: 768px) {
      .item-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .item-row > div {
        text-align: left;
        width: 100%;
      }
      .action-buttons {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <%- include("../../views/partials/user/header") %>

  <div class="hero-wrap hero-bread" style="background-image: url('/images/p41.jpg');">
    <div class="container">
      <div class="row no-gutters slider-text align-items-center justify-content-center">
        <div class="col-md-9 ftco-animate text-center">
          <p class="breadcrumbs"><span class="mr-2"><a href="/">Home</a></span> <span class="mr-2"><a href="/profile">Profile</a></span> <span>Order details</span></p>
          <h1 class="mb-0 bread">Order Details</h1>
        </div>
      </div>
    </div>
  </div>

  <section class="ftco-section bg-light">
    <div class="container">
      <a href="/orders" class="back-link"><i class="fa fa-arrow-left"></i> Return to order list</a>
      
      <div class="order-details-container">
        <h2 class="order-title">order #<%= order.orderId %></h2>

        <div class="order-info">
          <h3 class="card-title">Order</h3>
          <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
          <p><strong>status:</strong> <span class="order-status status-<%= order.status.toLowerCase().replace(' ', '-') %>"><%= order.status %></span></p>
          <p><strong>Total Amount:</strong> â‚¹<%= order.finalAmount.toLocaleString('en-IN') %></p>
          <p><strong>Payment method:</strong> <%= order.paymentMethod || 'N/A' %></p>
          <p><strong>Payment status:</strong> <%= order.paymentStatus || 'Pending' %></p>
          <% if (order.cancelReason) { %>
            <p><strong>Reason for cancellation:</strong> <%= order.cancelReason %></p>
          <% } %>
          <% if (order.returnReason) { %>
            <p><strong>Reason for return:</strong> <%= order.returnReason %></p>
          <% } %>
        </div>
       <!-- //order tarcking -->
        <!-- Add this right before the order-items div -->
<div class="order-tracking">
  <h3 class="card-title">Order Tracking</h3>
  <div class="tracking-timeline">
    <div class="timeline-item active">
      <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
      <div class="timeline-content">
        <h4>Order Placed</h4>
        <p><%= new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
      </div>
    </div>
    <div class="timeline-item <%= ['Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
      <div class="timeline-icon"><i class="fa fa-cog"></i></div>
      <div class="timeline-content">
        <h4>Processing</h4>
        <p><%= order.status === 'Pending' ? 'Pending' : (order.status === 'Cancelled' ? 'Cancelled' : 'Completed') %></p>
      </div>
    </div>
    <div class="timeline-item <%= ['Shipped', 'Delivered'].includes(order.status) ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
      <div class="timeline-icon"><i class="fa fa-truck"></i></div>
      <div class="timeline-content">
        <h4>Shipped</h4>
        <% if (order.shippedDate) { %>
          <p><%= new Date(order.shippedDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
          <% if (order.trackingId) { %>
            <p class="tracking-id">Tracking ID: <strong><%= order.trackingId %></strong></p>
          <% } %>
        <% } else { %>
          <p><%= order.status === 'Cancelled' ? 'Cancelled' : 'Pending' %></p>
        <% } %>
      </div>
    </div>
    <div class="timeline-item <%= order.status === 'Delivered' ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
      <div class="timeline-icon"><i class="fa fa-box-open"></i></div>
      <div class="timeline-content">
        <h4>Delivered</h4>
        <% if (order.deliveredDate) { %>
          <p><%= new Date(order.deliveredDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
        <% } else { %>
          <p><%= order.status === 'Cancelled' ? 'Cancelled' : 'Pending' %></p>
        <% } %>
      </div>
    </div>
    <% if (['Return Request', 'Returned'].includes(order.status)) { %>
    <div class="timeline-item <%= order.status === 'Returned' ? 'active' : 'pending' %>">
      <div class="timeline-icon"><i class="fa fa-undo"></i></div>
      <div class="timeline-content">
        <h4>Return <%= order.status === 'Return Request' ? 'Requested' : 'Completed' %></h4>
        <p><%= order.returnReason || 'No reason provided' %></p>
      </div>
    </div>
    <% } %>
  </div>
</div>






        <div class="order-items">
          <h3 class="card-title">Order items</h3>
          
          <div class="item-row item-header">
            <div>Image</div>
            <div>Product</div>
            <div>Price</div>
          </div>
          
          <% order.orderItems.forEach(function(item) { %>
            <div class="item-row">
              <div>
                <img src="/Uploads/product-images/<%= item.product.productImage[0] || 'default.jpg' %>" alt="<%= item.product.productName || 'Product' %>" class="product-img">
              </div>
              <div class="product-info">
                <div class="product-name"><%= item.product.productName || 'Unknown product' %></div>
                <div class="product-meta">
                  stock: <%= item.stock %>
                </div>
              </div>
              <div class="price-col"> â‚¹<%= order.finalAmount.toLocaleString('en-IN') %></div>
            </div>
          <% }); %>
        </div>

        <div class="address-info">
          <h3 class="card-title">Shipping Address</h3>
          <p><strong>Name:</strong> <%= address.name || 'N/A' %></p>
          <p><strong>Address:</strong> <%= address.addressLine1 %><%= address.addressLine2 ? ', ' + address.addressLine2 : '' %></p>
          <p><strong>City:</strong> <%= address.city || 'N/A' %>, <%= address.state || 'N/A' %> <%= address.pincode || 'N/A' %></p>
          <p><strong>Phone:</strong> <%= address.phone || 'N/A' %></p>
          <% if (address.altPhone) { %>
            <p><strong>Alternative phone:</strong> <%= address.altPhone %></p>
          <% } %>
        </div>

        <div class="action-buttons">
          <% if (order.status === 'Processing' || order.status === 'Pending') { %>
            <button class="btn btn-danger" onclick="cancelOrder('<%= order._id %>')">Cancel order</button>
          <% } %>
          <% if (order.status === 'Delivered' && !order.isReturned && !order.isReturnRequested) { %>
            <button class="btn btn-secondary" onclick="returnOrder('<%= order._id %>')">Return the order.</button>
          <% } %>
        </div>
      </div>
    </div>
  </section>

  <%- include("../../views/partials/user/footer") %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function cancelOrder(orderId) {
      const result = await Swal.fire({
        title: 'Do you want to cancel this order?',
        text: 'Provide a reason for cancellation (optional)',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it',
        cancelButtonText: 'No'
      });
  
      if (result.isConfirmed) {
        try {
          const response = await fetch('/cancelOrder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              reason: result.value || ''
            })
          });
  
          const data = await response.json();
  
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Order Cancelled!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload(); // Refresh to update status
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while cancelling the order.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }
  
    async function returnOrder(orderId) {
      const result = await Swal.fire({
        title: 'Do you want to return this order?',
        text: 'Please provide a reason for return',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        inputValidator: (value) => {
          if (!value) {
            return 'You need to provide a reason for the return.';
          }
        },
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Submit Return',
        cancelButtonText: 'No'
      });
  
      if (result.isConfirmed) {
        try {
          const response = await fetch('/order/return', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              reason: result.value
            })
          });
  
          const data = await response.json();
  
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Return Request Submitted!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload();
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while submitting the return request.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }
  </script>
  
</body>
</html>