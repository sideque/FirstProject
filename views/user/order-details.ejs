<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .order-tracking {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 20px;
      margin-bottom: 20px;
    }

    .tracking-timeline {
      display: flex;
      justify-content: space-between;
      margin: 30px 0;
      position: relative;
    }

    .tracking-timeline:before {
      content: '';
      position: absolute;
      top: 25px;
      left: 0;
      height: 4px;
      width: 100%;
      background: #eee;
      z-index: 1;
    }

    .timeline-item {
      position: relative;
      z-index: 2;
      flex: 1;
      text-align: center;
      padding: 0 10px;
    }

    .timeline-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: #eee;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      color: #aaa;
      font-size: 20px;
      border: 4px solid #fff;
    }

    .timeline-item.active .timeline-icon {
      background: #82ae46;
      color: white;
    }

    .timeline-item.pending .timeline-icon {
      background: #f0ad4e;
      color: white;
    }

    .timeline-item.cancelled .timeline-icon {
      background: #d9534f;
      color: white;
    }

    .timeline-item.return-request .timeline-icon,
    .timeline-item.returned .timeline-icon {
      background: #6c757d;
      color: white;
    }

    .timeline-content h4 {
      font-size: 16px;
      margin-bottom: 5px;
      color: #333;
    }

    .timeline-content p {
      font-size: 14px;
      color: #666;
      margin-bottom: 5px;
    }

    .tracking-id {
      background: #f8f9fa;
      padding: 5px 8px;
      border-radius: 4px;
      display: inline-block;
      font-size: 13px;
    }

    @media (max-width: 768px) {
      .tracking-timeline {
        flex-direction: column;
        margin: 20px 0;
      }
      
      .tracking-timeline:before {
        height: 100%;
        width: 4px;
        top: 0;
        left: 25px;
      }
      
      .timeline-item {
        display: flex;
        align-items: center;
        text-align: left;
        margin-bottom: 20px;
      }
      
      .timeline-icon {
        margin: 0 20px 0 0;
      }
      
      .timeline-content {
        flex: 1;
      }
    }

    .order-details-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .order-title {
      font-size: 24px;
      color: #333;
      margin-bottom: 20px;
    }

    .order-info, .order-items, .address-info {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 20px;
      margin-bottom: 20px;
    }

    .order-info p, .address-info p {
      margin: 10px 0;
      color: #666;
    }

    .order-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 500;
      color: white;
      display: inline-block;
    }

    .status-processing { background-color: #f0ad4e; }
    .status-shipped { background-color: #5bc0de; }
    .status-delivered { background-color: #5cb85c; }
    .status-cancelled { background-color: #d9534f; }
    .status-return-request { background-color: #6c757d; }
    .status-returned { background-color: #6c757d; }
    .status-pending { background-color: #f0ad4e; }

    .order-items-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }

    .order-items-table th,
    .order-items-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    .order-items-table th {
      background-color: #f8f9fa;
      font-weight: 600;
      color: #333;
      border-bottom: 2px solid #82ae46;
    }

    .order-items-table td {
      vertical-align: middle;
    }

    .product-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 4px;
    }

    .product-info {
      color: #333;
    }

    .product-name {
      font-weight: 500;
      font-size: 16px;
    }

    .product-meta {
      color: #666;
      font-size: 14px;
      margin-top: 5px;
    }

    .price-col {
      font-weight: 500;
      color: #333;
    }

    .action-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      margin-top: 20px;
    }

    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      color: white;
      font-weight: 500;
      text-align: center;
    }

    .btn-primary { background-color: #82ae46; }
    .btn-danger { background-color: #dc3545; }
    .btn-secondary { background-color: #6c757d; }

    .btn-item-cancel, .btn-item-return {
      padding: 8px 16px;
      font-size: 14px;
      display: inline-block;
      background-color: red;
    }

    .btn-item-cancel { background-color: #ff6b6b; }
    .btn-item-return { background-color: #6c757d; }

    @media (max-width: 768px) {
      .order-items-table {
        display: block;
      }

      .order-items-table thead {
        display: none;
      }

      .order-items-table tr {
        display: block;
        margin-bottom: 15px;
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 10px;
      }

      .order-items-table td {
        display: block;
        text-align: left;
        padding: 8px 10px;
        border: none;
      }

      .order-items-table td:before {
        content: attr(data-label);
        font-weight: 600;
        display: block;
        margin-bottom: 5px;
        color: #333;
      }

      .order-items-table td.image-col {
        text-align: center;
      }

      .action-buttons {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <%- include("../../views/partials/user/header") %>

  <div class="hero-wrap hero-bread" style="background-image: url('/images/p41.jpg');">
    <div class="container">
      <div class="row no-gutters slider-text align-items-center justify-content-center">
        <div class="col-md-9 ftco-animate text-center">
          <p class="breadcrumbs"><span class="mr-2"><a href="/">Home</a></span> <span class="mr-2"><a href="/profile">Profile</a></span> <span>Order details</span></p>
          <h1 class="mb-0 bread">Order Details</h1>
        </div>
      </div>
    </div>
  </div>

  <section class="ftco-section bg-light">
    <div class="container">
      <div class="order-details-container">
        <h2 class="order-title">Order #<%= order.orderId %></h2>

        <div class="order-info">
          <h3 class="card-title">Order</h3>
          <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
          <p><strong>Status:</strong> <span class="order-status status-<%= order.status.toLowerCase().replace(' ', '-') %>"><%= order.status %></span></p>
          <p><strong>Total Amount:</strong> â‚¹<%= order.finalAmount.toLocaleString('en-IN') %></p>
          <p><strong>Payment Method:</strong> <%= order.paymentMethod || 'N/A' %></p>
          <p><strong>Payment Status:</strong> <%= order.paymentStatus || 'Pending' %></p>
          <% if (order.cancelReason) { %>
            <p><strong>Reason for Cancellation:</strong> <%= order.cancelReason %></p>
          <% } %>
          <% if (order.returnReason) { %>
            <p><strong>Reason for Return:</strong> <%= order.returnReason %></p>
          <% } %>
        </div>

        <div class="order-tracking">
          <h3 class="card-title">Order Tracking</h3>
          <div class="tracking-timeline">
            <div class="timeline-item active">
              <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
              <div class="timeline-content">
                <h4>Order Placed</h4>
                <p><%= new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
              </div>
            </div>
            <div class="timeline-item <%= ['Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : order.status === 'Pending' ? 'pending' : '') %>">
              <div class="timeline-icon"><i class="fa fa-cog"></i></div>
              <div class="timeline-content">
                <h4>Processing</h4>
                <p><%= order.status === 'Pending' ? 'Pending' : (order.status === 'Cancelled' ? 'Cancelled' : 'Completed') %></p>
              </div>
            </div>
            <div class="timeline-item <%= ['Shipped', 'Delivered'].includes(order.status) ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
              <div class="timeline-icon"><i class="fa fa-truck"></i></div>
              <div class="timeline-content">
                <h4>Shipped</h4>
                <% if (order.shippedDate) { %>
                  <p><%= new Date(order.shippedDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                  <% if (order.trackingId) { %>
                    <p class="tracking-id">Tracking ID: <strong><%= order.trackingId %></strong></p>
                  <% } %>
                <% } else { %>
                  <p><%= order.status === 'Cancelled' ? 'Cancelled' : 'Pending' %></p>
                <% } %>
              </div>
            </div>
            <div class="timeline-item <%= order.status === 'Delivered' ? 'active' : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
              <div class="timeline-icon"><i class="fa fa-box-open"></i></div>
              <div class="timeline-content">
                <h4>Delivered</h4>
                <% if (order.deliveredDate) { %>
                  <p><%= new Date(order.deliveredDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                <% } else { %>
                  <p><%= order.status === 'Cancelled' ? 'Cancelled' : 'Pending' %></p>
                <% } %>
              </div>
            </div>
            <% if (['Return Request', 'Returned'].includes(order.status)) { %>
            <div class="timeline-item <%= order.status === 'Returned' ? 'active' : 'pending' %>">
              <div class="timeline-icon"><i class="fa fa-undo"></i></div>
              <div class="timeline-content">
                <h4>Return <%= order.status === 'Return Request' ? 'Requested' : 'Completed' %></h4>
                <p><%= order.returnReason || 'No reason provided' %></p>
              </div>
            </div>
            <% } %>
          </div>
        </div>

        <div class="order-items">
          <h3 class="card-title">Order Items</h3>
          <table class="order-items-table">
            <thead>
              <tr>
                <th>Image</th>
                <th>Product</th>
                <th>Price</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <% order.orderItems.forEach(function(item) { %>
                <tr>
                 <td data-label="Image" class="image-col">
                 <img 
                      src="<%= item.product.productImage && item.product.productImage.length > 0 
                              ? item.product.productImage[0] 
                              : '/images/default.webp' %>" 
                      alt="<%= item.product.productName || 'Product' %>" 
                      class="product-img">
              </td>
                  <td data-label="Product">
                    <div class="product-info">
                      <div class="product-name"><%= item.product.productName || 'Unknown product' %></div>
                      <div class="product-meta">
                        Quantity: <%= item.stock %>
                        <% if (item.cancelReason) { %>
                          <br>Cancel Reason: <%= item.cancelReason %>
                        <% } %>
                        <% if (item.returnReason) { %>
                          <br>Return Reason: <%= item.returnReason %>
                        <% } %>
                      </div>
                    </div>
                  </td>
                  <td data-label="Price" class="price-col">
                    â‚¹<%= (item.price * item.stock).toLocaleString('en-IN') %>
                  </td>
                  <td data-label="Status">
                    <span class="order-status status-<%= item.status.toLowerCase().replace(' ', '-') %>"><%= item.status %></span>
                  </td>
                  <td data-label="Action">
                    <% if ((order.status === 'Processing' || order.status === 'Pending') && item.status !== 'Cancelled' && item.status !== 'Delivered') { %>
                      <button class="btn btn-item-cancel" onclick="cancelItem('<%= order._id %>', '<%= item._id %>')">Cancel Item</button>
                    <% } %>
                    <% if (item.status === 'Delivered' && !item.isReturned && !item.isReturnRequested) { %>
                      <button class="btn btn-item-return" onclick="returnItem('<%= order._id %>', '<%= item._id %>')">Return Item</button>
                    <% } %>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>

        <div class="address-info">
          <h3 class="card-title">Shipping Address</h3>
          <p><strong>Name:</strong> <%= address.name || 'N/A' %></p>
          <p><strong>Address:</strong> <%= address.addressLine1 %><%= address.addressLine2 ? ', ' + address.addressLine2 : '' %></p>
          <p><strong>City:</strong> <%= address.city || 'N/A' %>, <%= address.state || 'N/A' %> <%= address.pincode || 'N/A' %></p>
          <p><strong>Phone:</strong> <%= address.phone || 'N/A' %></p>
          <% if (address.altPhone) { %>
            <p><strong>Alternative Phone:</strong> <%= address.altPhone %></p>
          <% } %>
        </div>

        <div class="action-buttons">
          <% if (order.status === 'Processing' || order.status === 'Pending') { %>
            <button class="btn btn-danger" onclick="cancelOrder('<%= order._id %>')">Cancel Entire Order</button>
          <% } %>
          <% if (order.status === 'Delivered' && !order.isReturned && !order.isReturnRequested) { %>
            <button class="btn btn-secondary" onclick="returnOrder('<%= order._id %>')">Return Entire Order</button>
          <% } %>
          <% if (order.status === 'Pending') { %>
            <button class="btn btn-primary" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
          <% } %>
        </div>
      </div>
    </div>
  </section>

  <%- include("../../views/partials/user/footer") %>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function cancelOrder(orderId) {
      const result = await Swal.fire({
        title: 'Do you want to cancel this entire order?',
        text: 'Provide a reason for cancellation (optional)',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it',
        cancelButtonText: 'No'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/cancelOrder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              reason: result.value || ''
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Order Cancelled!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload();
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while cancelling the order.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }

    async function cancelItem(orderId, itemId) {
      const result = await Swal.fire({
        title: 'Do you want to cancel this item?',
        text: 'Provide a reason for cancellation (optional)',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel item',
        cancelButtonText: 'No'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/cancelOrderItem', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              itemId,
              reason: result.value || ''
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Item Cancelled!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload();
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while cancelling the item.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }

    async function returnOrder(orderId) {
      const result = await Swal.fire({
        title: 'Do you want to return this entire order?',
        text: 'Please provide a reason for return',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        inputValidator: (value) => {
          if (!value) return 'You need to provide a reason for the return.';
        },
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Submit Return',
        cancelButtonText: 'No'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/order/return', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              reason: result.value
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Return Request Submitted!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload();
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while submitting the return request.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }

    async function returnItem(orderId, itemId) {
      const result = await Swal.fire({
        title: 'Do you want to return this item?',
        text: 'Please provide a reason for return',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        inputValidator: (value) => {
          if (!value) return 'You need to provide a reason for the return.';
        },
        showCancelButton: true,
        confirmButtonColor: '#82ae46',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Submit Return',
        cancelButtonText: 'No'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/order/returnItem', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId,
              itemId,
              reason: result.value
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Return Request Submitted!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
            window.location.reload();
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.message,
              confirmButtonColor: '#82ae46'
            });
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while submitting the return request.',
            confirmButtonColor: '#82ae46'
          });
        }
      }
    }

    async function retryPayment(orderId) {
      try {
        const response = await fetch('/retryPayment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': '<%= csrfToken %>',
          },
          body: JSON.stringify({ orderId }),
        });

        const data = await response.json();

        if (!response.ok) throw new Error(data.message || `HTTP error! Status: ${response.status}`);

        if (data.success && data.razorpayOrder) {
          if (typeof Razorpay === 'undefined') {
            console.error('Razorpay SDK not loaded');
            Swal.fire({
              icon: 'error',
              title: 'Payment Error',
              text: 'Razorpay payment service is unavailable. Please try again later.',
              confirmButtonColor: '#82ae46',
            });
            return;
          }

          const options = {
            key: data.razorpayOrder.key,
            amount: data.razorpayOrder.amount,
            currency: data.razorpayOrder.currency,
            order_id: data.razorpayOrder.id,
            name: 'MobiVault',
            description: `Retry Payment for Order #${data.orderDetails.orderId}`,
            image: '/images/admin-logo.png',
            handler: async function (response) {
              try {
                const verifyResponse = await fetch('/verify-razorpay-payment', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': '<%= csrfToken %>',
                  },
                  body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    orderDetails: data.orderDetails,
                  }),
                });

                const verifyData = await verifyResponse.json();

                if (verifyResponse.ok && verifyData.success) {
                  Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful',
                    text: 'Your payment was successful, and the order has been updated!',
                    confirmButtonColor: '#82ae46',
                    timer: 2000,
                    showConfirmButton: false,
                  }).then(() => {
                    window.location.href = `/order/success?orderId=${verifyData.orderId}`;
                  });
                } else {
                  throw new Error(verifyData.message || 'Payment verification failed');
                }
              } catch (error) {
                console.error('Razorpay verification error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: error.message || 'Unable to verify payment. Please contact support.',
                  confirmButtonColor: '#82ae46',
                }).then(() => {
                  window.location.href = `/paymentfailedpage?error=${encodeURIComponent(error.message || 'Verification failed')}`;
                });
              }
            },
            prefill: {
              name: '<%= user.name || "" %>',
              email: '<%= user.email || "" %>',
              contact: '<%= user.phone || "" %>',
            },
            notes: {
              order_id: data.orderDetails.orderId || 'N/A',
            },
            theme: {
              color: '#82ae46',
            },
            method: {
              card: true,
              upi: true,
              netbanking: true,
              wallet: true,
              emi: true,
            },
            modal: {
              ondismiss: function () {
                Swal.fire({
                  icon: 'warning',
                  title: 'Payment Cancelled',
                  text: 'You cancelled the payment. You can retry again to complete your order.',
                  confirmButtonColor: '#82ae46',
                }).then(() => {
                  window.location.href = `/paymentfailedpage?error=${encodeURIComponent('Payment cancelled by user')}`;
                });
              },
            },
          };

          const rzp = new Razorpay(options);
          rzp.on('payment.failed', function (response) {
            console.error('Razorpay payment failed:', response.error);
            Swal.fire({
              icon: 'error',
              title: 'Payment Failed',
              text: response.error.description || 'Payment failed. Please try again.',
              confirmButtonColor: '#82ae46',
            }).then(() => {
              window.location.href = `/paymentfailedpage?error=${encodeURIComponent(response.error.description || 'Payment failed')}`;
            });
          });
          rzp.open();
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to initiate payment retry.',
            confirmButtonColor: '#82ae46',
          });
        }
      } catch (error) {
        console.error('Error in retryPayment:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while initiating payment retry: ' + error.message,
          confirmButtonColor: '#82ae46',
        });
      }
    }
  </script>
</body>
</html>