<%- include("../../views/partials/user/header") %>
<style>
    /* Main Layout Adjustments */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }
    
    body {
        font-family: 'Poppins', Arial, sans-serif;
        color: #333;
        line-height: 1.6;
        background-color: #f8f9fa;
        margin: 0;
    }
    
    /* Cart Layout */
    .cart-container {
        display: flex;
        flex-wrap: wrap;
        margin: 30px 0;
        gap: 20px;
    }
    
    .cart-items {
        flex: 1 1 65%;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
        padding: 20px;
    }
    
    .order-summary {
        flex: 1 1 30%;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
        padding: 20px;
        align-self: flex-start;
    }
    
    /* Cart Item Styling */
    .cart-item {
        display: flex;
        border-bottom: 1px solid #eee;
        padding: 20px 0;
        position: relative;
    }
    
    .cart-item:last-child {
        border-bottom: none;
    }
    
    .item-image {
        flex: 0 0 150px;
        margin-right: 20px;
    }
    
    .item-image img {
        width: 100%;
        height: auto;
        object-fit: contain;
        border-radius: 8px;
    }
    
    .item-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    
    .item-title {
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 5px;
    }
    
    .item-seller {
        font-size: 14px;
        color: #666;
        margin-bottom: 5px;
    }
    
    .item-delivery {
        font-size: 14px;
        color: #666;
        margin-bottom: 5px;
    }
    
    .item-stock {
        font-size: 14px;
        color: #82ae46;
        margin-bottom: 10px;
    }
    
    .item-price {
        font-size: 18px;
        font-weight: 600;
        color: #82ae46;
        margin-bottom: 10px;
    }
    
    .item-original-price {
        font-size: 16px;
        color: #999;
        text-decoration: line-through;
        margin-left: 10px;
    }
    
    .item-actions {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }
    
    .quantity-control {
        display: flex;
        align-items: center;
        border-radius: 25px;
        overflow: hidden;
        margin-right: 20px;
    }
    
    .quantity-btn {
        background: #f1f3f5;
        border: none;
        padding: 8px 15px;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .quantity-btn:hover {
        background: #e9ecef;
    }
    
    .quantity-input {
        width: 50px;
        text-align: center;
        border: none;
        background: #f8f9fa;
        font-size: 16px;
        padding: 8px 0;
    }
    
    .remove-btn {
        color: #e63946;
        background: none;
        border: none;
        font-size: 14px;
        cursor: pointer;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        padding: 0;
        transition: all 0.3s ease;
    }
    
    .remove-btn:hover {
        color: #cc2e3a;
        transform: scale(1.02);
    }
    
    /* Order Summary Styling */
    .summary-title {
        font-size: 24px;
        font-weight: 600;
        margin: 0 0 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        font-size: 16px;
    }
    
    .summary-row.discount {
        color: #e63946;
    }
    
    .summary-row.total {
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #eee;
        font-size: 20px;
        font-weight: 600;
        color: #82ae46;
    }
    
    .checkout-btn {
        width: 100%;
        padding: 15px;
        border: none;
        border-radius: 30px;
        background: #82ae46;
        color: white;
        font-weight: 600;
        font-size: 16px;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 15px;
    }
    
    .checkout-btn:hover {
        background: #6d9338;
        transform: scale(1.02);
    }
    
    /* Empty Cart */
    .empty-cart {
        text-align: center;
        padding: 40px 20px;
    }
    
    .empty-cart h3 {
        font-size: 24px;
        color: #666;
        margin-bottom: 20px;
    }
    
    .shop-now-btn {
        display: inline-block;
        padding: 12px 30px;
        border-radius: 30px;
        background: #82ae46;
        color: white;
        font-weight: 600;
        font-size: 16px;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    
    .shop-now-btn:hover {
        background: #6d9338;
        transform: scale(1.02);
    }
    
    /* Pagination */
    .pagination {
        width: 100%;
        text-align: center;
        margin-top: 30px;
    }
    
    .pagination .btn {
        margin: 0 5px;
        padding: 8px 12px;
        border: 1px solid #82ae46;
        border-radius: 20px;
        color: #333;
        text-decoration: none;
        font-size: 14px;
        transition: all 0.3s ease;
    }
    
    .pagination .btn.active,
    .pagination .btn:hover {
        background: #82ae46;
        color: white;
    }
    
    /* Responsive */
    @media (max-width: 991px) {
        .cart-container {
            flex-direction: column;
        }
        
        .cart-items, .order-summary {
            width: 100%;
        }
    }
    
    @media (max-width: 767px) {
        .cart-item {
            flex-direction: column;
        }
        
        .item-image {
            margin-right: 0;
            margin-bottom: 15px;
            flex: none;
            width: 120px;
        }
        
        .remove-btn {
            position: absolute;
            top: 20px;
            right: 0;
        }
        
        .item-actions {
            margin-top: 20px;
        }
        
        .hero-wrap {
            height: 200px;
        }
        
        .bread {
            font-size: 32px;
        }
    }
</style>

<div class="hero-wrap hero-bread" style="background-image: url('/images/p554.jpg');">
    <div class="container">
        <div class="row no-gutters slider-text align-items-center justify-content-center">
            <div class="col-md-9 ftco-animate text-center">
                <p class="breadcrumbs"><span class="mr-2"><a href="/">Home</a></span> <span>Cart</span></p>
                <h1 class="mb-0 bread">My Cart</h1>
            </div>
        </div>
    </div>
</div>

<section class="ftco-section bg-light">
    <div class="container">
        <% if (cartItems && cartItems.length > 0) { %>
            <div class="cart-container">
                
                <div class="cart-items">
                    <% let subtotal = 0; %>
                    <% let discount = 0; %>
                    <% cartItems.forEach(function(item) { %>
                        <% if (item.productId && item.productId.salePrice !== undefined && item.stock !== undefined) { %>
                            <% const itemTotal = item.productId.salePrice * item.stock; %>
                            <% const itemOriginalTotal = item.productId.originalPrice ? item.productId.originalPrice * item.stock : itemTotal; %>
                            <% subtotal += itemTotal; %>
                            <div class="cart-item" data-id="<%= item.productId._id %>" data-max="<%= item.productId.stock || 0 %>">
                                <img class="img-fluid"
                                     src="/Uploads/product-images/<%= item.productId.productImage[0] %>"
                                     alt="<%= item.productId.productName || 'mobile phone' %>"
                                     style="height: 320px; width: 100%; object-fit: contain; padding: 10px;">
                                <div class="item-details">
                                    <div>
                                        <h3 class="item-title"><%= item.productId.productName || 'Unnamed Product' %></h3>
                                        <p class="item-seller">Seller: <%= item.productId.brand || 'Brand' %></p>
                                        <p class="item-delivery">Delivery by <%= getDeliveryDate(5) %> | Free</p>
                                        <p class="item-stock">In Stock (<%= item.productId.stock || 4 %> available)</p>
                                    </div>
                                    <div>
                                        <p class="item-price">₹<%= item.productId.salePrice.toLocaleString() %> 
                                            <% if (item.productId.originalPrice && item.productId.originalPrice > item.productId.salePrice) { %>
                                                <span class="item-original-price">₹<%= item.productId.originalPrice.toLocaleString() %></span>
                                            <% } %>
                                        </p>
                                        <div class="item-actions">
                                            <div class="quantity-control">
                                                <button class="quantity-btn decrease-btn">-</button>
                                                <input type="text" class="quantity-input" value="<%= item.stock %>" readonly>
                                                <button class="quantity-btn increase-btn">+</button>
                                            </div>
                                            <button class="remove-btn">Remove</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% } else { %>
                            <% console.log('Skipping invalid item:', item); %>
                        <% } %>
                    <% }); %>
                </div>
                
                <div class="order-summary">
                    <h2 class="summary-title">Order Summary</h2>
                    <div class="summary-row">
                        <span>Subtotal (<%= cartItems.reduce((acc, item) => acc + (item.stock || 0), 0) %> items)</span>
                        <span id="subtotal">₹<%= subtotal.toLocaleString() %></span>
                    </div>
                    <% if (discount > 0) { %>
                        <div class="summary-row discount">
                            <span>Offer Discount</span>
                            <span>-₹<%= discount.toLocaleString() %></span>
                        </div>
                    <% } %>
                    <div class="summary-row discount">
                        <span>Coupon Discount</span>
                        <span>-₹0</span>
                    </div>
                    <div class="summary-row discount">
                        <span>Coupon Discount</span>
                        <span>-₹0</span>
                    </div>
                    <div class="summary-row">
                        <span>Delivery</span>
                        <span>Free</span>
                    </div>
                    <div class="summary-row total">
                        <span>Total</span>
                        <span id="total">₹<%= (subtotal - discount).toLocaleString() %></span>
                    </div>
                    <button class="checkout-btn" onclick="window.location.href='/checkout'">Proceed to Checkout</button>
                </div>
            </div>
            
            <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) { %>
                        <a class="btn" href="/cart?page=<%= currentPage - 1 %>">Previous</a>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a class="btn <%= i === currentPage ? 'active' : '' %>" href="/cart?page=<%= i %>"><%= i %></a>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                        <a class="btn" href="/cart?page=<%= currentPage + 1 %>">Next</a>
                    <% } %>
                </div>
            <% } %>
            
        <% } else { %>
            <div class="empty-cart">
                <h3>Your cart is empty!</h3>
                <p>More phone is here</p>
                <a href="/shop" class="shop-now-btn">Shop Now</a>
            </div>
        <% } %>
    </div>
</section>  

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const decreaseBtns = document.querySelectorAll('.decrease-btn');
        const increaseBtns = document.querySelectorAll('.increase-btn');
        const removeBtns = document.querySelectorAll('.remove-btn');

        // Update cart quantity function
        async function updateCartQuantity(productId, quantity) {
            try {
                const response = await fetch('/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity }),
                });

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.message || 'Failed to update cart');
                }
                console.log('Cart updated:', result);

                // Update subtotal and total dynamically
                if (result.total) {
                    document.getElementById('subtotal').textContent = `₹${result.total.toLocaleString()}`;
                    document.getElementById('total').textContent = `₹${result.total.toLocaleString()}`;
                }

                return result;
            } catch (error) {
                console.error('Error updating cart:', error);
                throw error;
            }
        }

        // Decrease button
        decreaseBtns.forEach(btn => {
            btn.addEventListener('click', function () {
                const cartItem = this.closest('.cart-item');
                const productId = cartItem.dataset.id;
                const input = cartItem.querySelector('.quantity-input');
                let value = parseInt(input.value);

                if (value > 1) {
                    value -= 1;
                    input.value = value;
                    updateCartQuantity(productId, value).catch(error => {
                        input.value = value + 1;
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to decrease quantity: ' + error.message,
                            confirmButtonColor: '#82ae46',
                        });
                    });
                }
            });
        });

        // Increase button (with Swal for invalid maxStock)
        increaseBtns.forEach(btn => {
            btn.addEventListener('click', async function () {
                const cartItem = this.closest('.cart-item');
                const productId = cartItem.dataset.id;
                const maxStock = parseInt(cartItem.dataset.max);
                const input = cartItem.querySelector('.quantity-input');
                let value = parseInt(input.value);

                if (isNaN(maxStock) || maxStock <= 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Stock',
                        text: 'The stock value for this product is invalid. Please contact support.',
                        confirmButtonColor: '#82ae46',
                    });
                    console.error('Invalid maxStock:', cartItem.dataset.max);
                    return;
                }

                if (value < maxStock) {
                    value += 1;
                    input.value = value;
                    try {
                        await updateCartQuantity(productId, value);
                        console.log('Quantity increased to:', value);
                    } catch (error) {
                        input.value = value - 1;
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to increase quantity: ' + error.message,
                            confirmButtonColor: '#82ae46',
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Stock Limit',
                        text: `Cannot increase quantity. Only ${maxStock} items in stock.`,
                        confirmButtonColor: '#82ae46',
                    });
                }
            });
        });

        // Remove button
        removeBtns.forEach(btn => {
            btn.addEventListener('click', function () {
                const cartItem = this.closest('.cart-item');
                const productId = cartItem.dataset.id;

                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#82ae46',
                    cancelButtonColor: '#e63946',
                    confirmButtonText: 'Yes, remove it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        removeFromCart(productId);
                    }
                });
            });
        });

        // Remove from cart function
        function removeFromCart(productId) {
            fetch('/cart/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Removed!',
                        'The item has been removed from your cart.',
                        'success'
                    ).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire('Error', 'Failed to remove item: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error removing item:', error);
                Swal.fire('Error', 'An error occurred while removing the item from your cart.', 'error');
            });
        }

        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('success') === 'true') {
            Swal.fire({
                icon: 'success',
                title: 'Cart added successfully',
                confirmButtonColor: '#82ae46',
                timer: 2000, // Auto close after 2 seconds
                showConfirmButton: false
            });
            // Remove the success parameter from URL
            window.history.replaceState({}, document.title, '/cart');
        }


        

        // Helper function for EJS template
        function getDeliveryDate(daysFromNow) {
            const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            
            const date = new Date();
            date.setDate(date.getDate() + daysFromNow);
            
            return `${days[date.getDay()]} ${months[date.getMonth()]} ${date.getDate()}`;
        }
    });
</script>

<%- include("../../views/partials/user/footer") %>