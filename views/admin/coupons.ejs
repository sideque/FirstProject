<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MobiVault Coupons</title>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/css/sideBar.css">
  <style>
    /* General styling */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #1E1E1E;
        color: #333;
    }

    .main-content {
        margin-left: 250px;
        margin-top: 20px;
        padding: 20px;
        transition: margin-left 0.3s;
    }

    h1 {
        margin-bottom: 20px;
        color: #fff;
    }

    /* Coupons styling */
    .coupons-container {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 20px;
        margin-top: 70px;
    }

    .coupons-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .coupons-title {
        font-size: 24px;
        font-weight: bold;
        color: #fff;
    }

    .add-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 15px;
        font-size: 16px;
        cursor: pointer;
    }

    .coupons-table {
        width: 100%;
        border-collapse: collapse;
    }

    .coupons-table th {
        text-align: left;
        padding: 10px;
        border-bottom: 1px solid #444;
        font-weight: normal;
        color: #fff;
    }

    .coupons-table td {
        padding: 10px;
        border-bottom: 1px solid #444;
        color: #fff;
    }

    .actions-column {
        text-align: right;
    }

    .action-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        text-transform: uppercase;
        font-size: 12px;
        transition: background-color 0.3s;
        margin: 2px;
        min-width: 80px;
    }

    .action-btn.edit-btn {
        background-color: #4778FF;
    }

    .action-btn.edit-btn:hover {
        background-color: #2754cc;
    }

    .action-btn.unlist-btn {
        background-color: #4CAF50;
    }

    .action-btn.unlist-btn:hover {
        background-color: #3e8e41;
    }

    .action-btn a {
        color: white;
        text-decoration: none;
        display: block;
        width: 100%;
        height: 100%;
    }

    /* Modal Styling */
    .modal-content {
        background-color: #2a2a2a;
        color: #fff;
        border-radius: 8px;
    }

    .modal-header {
        border-bottom: 1px solid #444;
        padding: 15px 20px;
    }

    .modal-title {
        font-size: 22px;
        font-weight: bold;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        border-top: 1px solid #444;
        padding: 15px 20px;
    }

    .close-btn {
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
    }

    .submit-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
    }

    .form-label {
        margin-bottom: 8px;
        color: #fff;
    }

    .form-control {
        background-color: #3a3a3a;
        border: 1px solid #555;
        color: #fff;
        padding: 10px;
        margin-bottom: 15px;
    }

    .form-control:focus {
        background-color: #3a3a3a;
        border-color: #4CAF50;
        color: #fff;
        box-shadow: 0 0 0 0.25rem rgba(76, 175, 80, 0.25);
    }

    .required-field::after {
        content: "*";
        color: #ff0000;
        margin-left: 3px;
    }

    /* Filter Dropdown Styling */
    .filter-dropdown {
        background-color: #3a3a3a;
        border: 1px solid #555;
        color: #fff;
        padding: 8px;
        border-radius: 4px;
        margin-right: 10px;
    }

    .filter-dropdown:focus {
        border-color: #4CAF50;
        outline: none;
    }

    /* Responsive Styles */
    @media (max-width: 992px) {
        .sidebar {
            width: 200px;
        }
        .main-content {
            margin-left: 200px;
        }
    }

    @media (max-width: 768px) {
        .main-content {
            margin-left: 60px;
        }
        .coupons-table {
            font-size: 14px;
        }
        .coupons-table th, .coupons-table td {
            padding: 8px 10px;
        }
        .action-btn {
            padding: 6px 8px;
            font-size: 11px;
        }
    }

    @media (max-width: 480px) {
        .main-content {
            margin-left: 0;
        }
    }
  </style>
</head>
<body>
  <!-- Sidebar Navigation (Assuming it's included from a partial) -->
  <%-include("../../views/partials/admin/admin-sidebar")%> 
  <%- include("../../views/partials/admin/admin-header") %>
  
  <div class="main-content">  
    <!-- Coupons container -->
    <div class="coupons-container">
        <div class="coupons-header">
            <div class="coupons-title">Coupons</div>
            <div>
                <select id="listingFilter" class="filter-dropdown" onchange="filterCoupons()">
                    <option value="listed" <%= listingStatus === true ? 'selected' : '' %>>Listed Coupons</option>
                    <option value="unlisted" <%= listingStatus === false ? 'selected' : '' %>>Unlisted Coupons</option>
                </select>
                <button class="add-button" data-bs-toggle="modal" data-bs-target="#addCouponModal">ADD COUPONS +</button>
            </div>
        </div>

        <table class="coupons-table">
            <thead>
                <tr>
                    <th>COUPON NAME</th>
                    <th>COUPON CODE</th>
                    <th>MIN CART VALUE</th>
                    <th>COUPON AMOUNT</th>
                    <th>VALID FROM</th>
                    <th>VALID UPTO</th>
                    <th class="actions-column">ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                <% if (coupons && coupons.length > 0) { %>
                    <% coupons.forEach( items => { %>
                        <tr>
                            <td><%= items.couponName %></td>
                            <td><%= items.couponCode %></td>
                            <td>₹ <%= items.minCartValue %></td>
                            <td>₹ <%= items.offerAmount %></td>
                            <td>
                                <%= items.validFrom.toLocaleDateString('en-US', { year: 'numeric' ,
                                            month: 'short' , day: 'numeric' }) %>
                            </td>
                            <td>
                                <%= items.validUpto.toLocaleDateString('en-US', { year: 'numeric' ,
                                month: 'short' , day: 'numeric' }) %>
                            </td>
                            <td class="actions-column">
                                <button class="action-btn edit-btn" data-bs-toggle="modal" data-bs-target="#editCouponModal" onclick="editCoupon('<%= items._id %>')">
                                    Edit
                                </button>
                                <% if (items.isList) { %>
                                    <button class="action-btn unlist-btn" onclick="toggleCouponStatus('<%= items._id %>', false)">
                                        Unlist
                                    </button>
                                <% } else { %>
                                    <button class="action-btn unlist-btn" onclick="toggleCouponStatus('<%= items._id %>', true)">
                                        List
                                    </button>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="7">No coupons available</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Include the Pagination Partial -->
    <%-include("../../views/partials/admin/pagination")%>
  </div>

  <!-- Add Coupon Modal -->
  <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCouponModalLabel">Add Coupon</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="addCouponForm" action="/admin/add-coupon" method="POST">
          <div class="modal-body">
            <div class="mb-3">
              <label for="couponName" class="form-label required-field">Coupon Name</label>
              <input type="text" class="form-control" id="couponName" name="couponName" required>
            </div>
            <div class="mb-3">
              <label for="description" class="form-label required-field">Description</label>
              <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
            </div>
            <div class="mb-3">
              <label for="couponCode" class="form-label required-field">Coupon Code</label>
              <input type="text" class="form-control" id="couponCode" name="couponCode" placeholder="It should be 6 characters including numbers and letters" minlength="6" maxlength="6" required>
            </div>
            <div class="mb-3">
              <label for="validFrom" class="form-label required-field">Valid From</label>
              <input type="date" class="form-control" id="validFrom" name="validFrom" required>
            </div>
            <div class="mb-3">
              <label for="validUpto" class="form-label required-field">Valid Upto</label>
              <input type="date" class="form-control" id="validUpto" name="validUpto" required>
            </div>
            <div class="mb-3">
              <label for="minCartValue" class="form-label required-field">Minimum Cart Value</label>
              <input type="number" class="form-control" id="minCartValue" name="minCartValue" min="0" required>
            </div>
            <div class="mb-3">
              <label for="offerAmount" class="form-label required-field">Offer Amount</label>
              <input type="number" class="form-control" id="offerAmount" name="offerAmount" min="0" required>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="close-btn" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="submit-btn">ADD COUPON</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Coupon Modal -->
  <div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="editCouponForm" method="POST">
          <input type="hidden" id="editCouponId" name="couponId">
          <div class="modal-body">
            <div class="mb-3">
              <label for="editCouponName" class="form-label required-field">Coupon Name</label>
              <input type="text" class="form-control" id="editCouponName" name="couponName" required>
            </div>
            <div class="mb-3">
              <label for="editDescription" class="form-label required-field">Description</label>
              <textarea class="form-control" id="editDescription" name="description" rows="3" required></textarea>
            </div>
            <div class="mb-3">
              <label for="editCouponCode" class="form-label required-field">Coupon Code</label>
              <input type="text" class="form-control" id="editCouponCode" name="couponCode" placeholder="It should be 6 characters including numbers and letters" minlength="6" maxlength="6" required>
            </div>
            <div class="mb-3">
              <label for="editValidFrom" class="form-label required-field">Valid From</label>
              <input type="date" class="form-control" id="editValidFrom" name="validFrom" required>
            </div>
            <div class="mb-3">
              <label for="editValidUpto" class="form-label required-field">Valid Upto</label>
              <input type="date" class="form-control" id="editValidUpto" name="validUpto" required>
            </div>
            <div class="mb-3">
              <label for="editMinCartValue" class="form-label required-field">Minimum Cart Value</label>
              <input type="number" class="form-control" id="editMinCartValue" name="minCartValue" min="0" required>
            </div>
            <div class="mb-3">
              <label for="editOfferAmount" class="form-label required-field">Offer Amount</label>
              <input type="number" class="form-control" id="editOfferAmount" name="offerAmount" min="0" required>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="close-btn" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="submit-btn">UPDATE COUPON</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Set default dates for Valid From (today) and Valid Upto (one month from today)
    document.addEventListener('DOMContentLoaded', function() {
      const today = new Date();
      const nextMonth = new Date();
      nextMonth.setMonth(today.getMonth() + 1);
      
      const formatDate = date => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
      };
      
      document.getElementById('validFrom').value = formatDate(today);
      document.getElementById('validUpto').value = formatDate(nextMonth);

      // Add event listener for edit coupon code input
      document.getElementById('editCouponCode').addEventListener('input', function() {
        this.value = this.value.toUpperCase();
        if (!/^[A-Z0-9]*$/.test(this.value)) {
          this.value = this.value.replace(/[^A-Z0-9]/g, '');
        }
      });
    });

    // Form validation for coupon code (6 characters with letters and numbers)
    document.getElementById('couponCode').addEventListener('input', function() {
      this.value = this.value.toUpperCase();
      if (!/^[A-Z0-9]*$/.test(this.value)) {
        this.value = this.value.replace(/[^A-Z0-9]/g, '');
      }
    });

    // Handle form submission for adding a coupon
    document.getElementById('addCouponForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const formDataObj = Object.fromEntries(formData.entries());
      
      try {
        const response = await fetch('/admin/add-coupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formDataObj)
        });
        
        const result = await response.json();
        
        if (result.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Coupon added successfully',
            icon: 'success',
            confirmButtonColor: '#4CAF50'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to add coupon',
            icon: 'error',
            confirmButtonColor: '#d33'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong',
          icon: 'error',
          confirmButtonColor: '#d33'
        });
      }
    });

    // Function to fetch and populate the edit coupon modal
    async function editCoupon(couponId) {
      try {
        const response = await fetch(`/admin/get-coupon/${couponId}`);
        const result = await response.json();

        if (result.success) {
          const coupon = result.data;

          // Populate the form fields
          document.getElementById('editCouponId').value = coupon._id;
          document.getElementById('editCouponName').value = coupon.couponName;
          document.getElementById('editDescription').value = coupon.description;
          document.getElementById('editCouponCode').value = coupon.couponCode;

          // Format dates for input fields
          const formatDate = date => {
            const d = new Date(date);
            const year = d.getFullYear();
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
          };

          document.getElementById('editValidFrom').value = formatDate(coupon.validFrom);
          document.getElementById('editValidUpto').value = formatDate(coupon.validUpto);
          document.getElementById('editMinCartValue').value = coupon.minCartValue;
          document.getElementById('editOfferAmount').value = coupon.offerAmount;
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to fetch coupon data',
            icon: 'error',
            confirmButtonColor: '#d33'
          });
        }
      } catch (error) {
        console.error('Error fetching coupon data:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong while fetching coupon data',
          icon: 'error',
          confirmButtonColor: '#d33'
        });
      }
    }

    // Handle form submission for editing a coupon
    document.getElementById('editCouponForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const formDataObj = Object.fromEntries(formData.entries());
      const couponId = formDataObj.couponId;

      try {
        const response = await fetch(`/admin/update-coupon/${couponId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formDataObj)
        });
        
        const result = await response.json();
        
        if (result.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Coupon updated successfully',
            icon: 'success',
            confirmButtonColor: '#4CAF50'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to update coupon',
            icon: 'error',
            confirmButtonColor: '#d33'
          });
        }
      } catch (error) {
        console.error('Error updating coupon:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong while updating the coupon',
          icon: 'error',
          confirmButtonColor: '#d33'
        });
      }
    });

    // Function to toggle coupon status (list/unlist)
    async function toggleCouponStatus(couponId, action) {
      try {
        const response = await fetch(`/admin/${action ? 'list' : 'unlist'}-coupon/${couponId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          Swal.fire({
            title: 'Success!',
            text: `Coupon ${action ? 'listed' : 'unlisted'} successfully`,
            icon: 'success',
            confirmButtonColor: '#4CAF50'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to update coupon status',
            icon: 'error',
            confirmButtonColor: '#d33'
          });
        }
      } catch (error) {
        console.error('Error toggling coupon status:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong',
          icon: 'error',
          confirmButtonColor: '#d33'
        });
      }
    }

    // Function to delete coupon
    async function deleteCoupon(couponId) {
      const confirmDelete = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to delete this coupon?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
      });

      if (confirmDelete.isConfirmed) {
        const response = await fetch(`/admin/delete-coupon/${couponId}`, { method: 'DELETE' });
        const result = await response.json();

        if (result.success) {
          await Swal.fire('Deleted!', 'The coupon was deleted successfully.', 'success');
          location.reload();
        } else {
          Swal.fire('Error!', result.message || 'Something went wrong.', 'error');
        }
      }
    }

    // Function to filter coupons by listing status
    function filterCoupons() {
      const status = document.getElementById('listingFilter').value;
      window.location.href = `/admin/coupons?status=${status}`;
    }
  </script>
</body>
</html>