<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
    <link rel="stylesheet" href="/css/add-product.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css">
</head>
<body>
    <%- include("../../views/partials/admin/admin-sidebar") %> 
    
    <div class="main-content" id="mainContent">
        <div class="form-container">
            <h4 class="form-title">Add Product</h4>
            
            <div id="successAlert" class="alert alert-success" style="display: none;">
                Product added successfully!
            </div>
        
            <form action="/admin/addProduct" method="post" enctype="multipart/form-data" id="productForm">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="mb-3">
                            <label class="form-label">Product Images (3 images required):</label>
                            <div class="image-preview-container">
                                <% for(let i=0; i<3; i++) { %>
                                    <div class="image-wrapper">
                                        <div class="image-preview image-preview-emptyise: none;" id="imagePreview<%= i %>"></div>
                                        <button type="button" class="delete-image-btn" id="deleteBtn<%= i %>">×</button>
                                    </div>
                                <% } %>
                            </div>
                            
                            <% for(let i=0; i<3; i++) { %>
                                <input type="file" class="hidden-file-input" id="productImage<%= i %>" name="images" 
                                    accept="image/png, image/jpeg, image/jpg, image/webp" onchange="handleFileSelect(event, <%= i %>)">
                            <% } %>
                            
                            <div id="images-error" class="error-message"></div>
                            <div class="mt-2">
                                <span class="helper-text">Click on any box to upload and crop image (all 3 images required)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name:</label>
                            <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter product name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Product Description:</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Enter product description"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="brand" class="form-label">Brand:</label>
                            <select class="form-control" id="brand" name="brand">
                                <option value="" selected disabled>Select a Brand</option>
                                <% brand.forEach(b => { %>
                                    <option value="<%= b._id %>"><%= b.name %></option>
                                <% }) %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="regularPrice" class="form-label">Regular Price:</label>
                            <input type="text" class="form-control" id="regularPrice" name="regularPrice" placeholder="0.00">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="category" class="form-label">Category:</label>
                            <select class="form-control" id="category" name="category">
                                <option value="" selected disabled>Select a Category</option>
                                <% cat.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                <% }) %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="salePrice" class="form-label">Sale Price:</label>
                            <input type="text" class="form-control" id="salePrice" name="salePrice" placeholder="0.00">
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Stock Count:</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" placeholder="0">
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-12">
                        <h5 class="section-title">Phone Specifications</h5>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="processor" class="form-label">Processor:</label>
                            <input type="text" class="form-control" id="processor" name="processor" placeholder="e.g. Snapdragon 8 Gen 2">
                            <div id="processor-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="storage" class="form-label">Storage:</label>
                            <input type="text" class="form-control" id="storage" name="storage" placeholder="e.g. 128GB UFS 3.1">
                            <div id="storage-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="ram" class="form-label">RAM:</label>
                            <input type="text" class="form-control" id="ram" name="ram" placeholder="e.g. 8GB LPDDR5X">
                            <div id="ram-error" class="error-message"></div>
                        </div>
                        <div class="mb-3">
                            <label for="camera" class="form-label">Camera:</label>
                            <input type="text" class="form-control" id="camera" name="camera" placeholder="e.g. 50MP (Main) + 12MP (Ultra-wide)">
                            <div id="camera-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-12 text-end">
                        <button type="submit" id="submitProductBtn" class="add-product-btn">ADD PRODUCT</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <div id="cropModal" class="crop-modal">
        <div class="crop-modal-content">
            <span class="close-modal" onclick="closeCropModal()">×</span>
            <h5>Crop Image</h5>
            <div class="crop-container">
                <img id="cropImage" src="" alt="Image to crop">
            </div>
            <div class="crop-buttons">
                <button class="crop-btn crop-btn-cancel" onclick="closeCropModal()">Cancel</button>
                <button class="crop-btn crop-btn-crop" onclick="cropImage()">Crop</button>
            </div>
        </div>
    </div>
    
    <button id="scrollTopBtn" class="scroll-top-btn" onclick="scrollToTop()">↑</button>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.all.min.js"></script>
    
    <script>
        let cropper;
        let currentImageIndex = -1;
        const previewElements = Array.from({length: 3}, (_, i) => document.getElementById(`imagePreview${i}`));
        const deleteButtons = Array.from({length: 3}, (_, i) => document.getElementById(`deleteBtn${i}`));
        const fileInputs = Array.from({length: 3}, (_, i) => document.getElementById(`productImage${i}`));

        document.addEventListener('DOMContentLoaded', function() {
            previewElements.forEach((preview, index) => {
                preview.addEventListener('click', () => {
                    fileInputs[index].click();
                });
                deleteButtons[index].style.display = 'none';
                deleteButtons[index].addEventListener('click', (e) => {
                    e.stopPropagation();
                    deleteImage(index);
                });
            });

            window.addEventListener('scroll', function() {
                const scrollBtn = document.getElementById('scrollTopBtn');
                scrollBtn.style.display = (window.scrollY > 20) ? 'flex' : 'none';
            });

            document.getElementById('productForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                if (validateForm()) {
                    const formData = new FormData(this);
                    Swal.fire({
                        title: 'Adding Product...',
                        text: 'Please wait while we add your product',
                        allowOutsideClick: false,
                        didOpen: () => Swal.showLoading()
                    });

                    try {
                        const response = await fetch('/admin/addProduct', {
                            method: 'POST',
                             headers: {
                                'Accept': 'application/json'
                            },
                            body: formData
                        });

                        const data = await response.json();
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '/admin/product';
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while adding the product.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });

            setupLiveValidation();
        });

        function setupLiveValidation() {
            const fields = [
                { id: 'productName', errorId: 'productName-error', validate: value => value.trim() ? '' : 'Product name is required' },
                { id: 'description', errorId: 'description-error', validate: value => value.trim() ? '' : 'Product description is required' },
                { id: 'brand', errorId: 'brand-error', validate: value => value ? '' : 'Please select a brand' },
                { id: 'category', errorId: 'category-error', validate: value => value ? '' : 'Please select a category' },
                {
                    id: 'regularPrice',
                    errorId: 'regularPrice-error',
                    validate: value => {
                        const num = parseFloat(value);
                        if (!value.trim()) return 'Regular price is required';
                        if (isNaN(num) || num <= 0) return 'Regular price must be greater than 0';
                        return '';
                    }
                },
                {
                    id: 'salePrice',
                    errorId: 'salePrice-error',
                    validate: value => {
                        if (!value.trim()) return '';
                        const num = parseFloat(value);
                        if (isNaN(num) || num <= 0) return 'Sale price must be greater than 0';
                        return '';
                    }
                },
                {
                    id: 'quantity',
                    errorId: 'quantity-error',
                    validate: value => {
                        const num = parseInt(value);
                        if (!value.trim()) return 'Stock count is required';
                        if (isNaN(num) || num < 0) return 'Stock count cannot be negative';
                        return '';
                    }
                }
            ];

            fields.forEach(field => {
                const element = document.getElementById(field.id);
                element.addEventListener('input', () => {
                    const error = field.validate(element.value);
                    if (error) showError(field.errorId, error);
                    else hideError(field.errorId);
                });

                if (field.id === 'regularPrice' || field.id === 'salePrice') {
                    element.addEventListener('input', (e) => {
                        let value = e.target.value.replace(/[^0-9.]/g, '');
                        const parts = value.split('.');
                        if (parts.length > 2) value = `${parts[0]}.${parts[1]}`;
                        if (parts[1] && parts[1].length > 2) value = `${parts[0]}.${parts[1].substring(0, 2)}`;
                        e.target.value = value;
                    });
                }
            });
        }

        function handleFileSelect(event, index) {
            const file = event.target.files[0];
            if (!file) return;

            const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
            if (!validTypes.includes(file.type)) {
                showError('images-error', 'Please select an image file (JPEG, JPG, PNG, or WEBP)');
                event.target.value = '';
                return;
            }

            const maxSizeInBytes = 10 * 1024 * 1024;
            if (file.size > maxSizeInBytes) {
                showError('images-error', 'Image size should not exceed 10MB');
                event.target.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('cropImage').src = e.target.result;
                document.getElementById('cropModal').style.display = 'block';

                if (cropper) cropper.destroy();
                cropper = new Cropper(document.getElementById('cropImage'), {
                    aspectRatio: 1,
                    viewMode: 1,
                    background: false,
                    zoomable: true,
                    cropBoxResizable: true,
                    autoCropArea: 1
                });

                currentImageIndex = index;
            };
            reader.readAsDataURL(file);
        }

        function cropImage() {
            if (!cropper) return;

            const canvas = cropper.getCroppedCanvas({
                width: 300,
                height: 300
            });
            
            canvas.toBlob(blob => {
                const file = new File([blob], `cropped-image-${currentImageIndex}.webp`, { type: 'image/webp' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInputs[currentImageIndex].files = dataTransfer.files;
                
                previewElements[currentImageIndex].style.backgroundImage = `url(${URL.createObjectURL(blob)})`;
                previewElements[currentImageIndex].classList.remove('image-preview-empty');
                
                deleteButtons[currentImageIndex].style.display = 'flex';
                hideError('images-error');
                closeCropModal();
            }, 'image/webp');
        }

        function closeCropModal() {
            document.getElementById('cropModal').style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        function deleteImage(index) {
            previewElements[index].style.backgroundImage = '';
            previewElements[index].classList.add('image-preview-empty');
            fileInputs[index].value = '';
            deleteButtons[index].style.display = 'none';
        }

        function validateForm() {
            let isValid = true;

            const imagesFilled = fileInputs.every(input => input.files.length > 0);
            if (!imagesFilled) {
                showError('images-error', 'Please upload all 3 required product images');
                isValid = false;
            } else {
                hideError('images-error');
            }

            const productName = document.getElementById('productName').value;
            if (!productName.trim()) {
                showError('productName-error', 'Product name is required');
                isValid = false;
            } else {
                hideError('productName-error');
            }

            const description = document.getElementById('description').value;
            if (!description.trim()) {
                showError('description-error', 'Product description is required');
                isValid = false;
            } else {
                hideError('description-error');
            }

            const brand = document.getElementById('brand').value;
            if (!brand) {
                showError('brand-error', 'Please select a brand');
                isValid = false;
            } else {
                hideError('brand-error');
            }

            const category = document.getElementById('category').value;
            if (!category) {
                showError('category-error', 'Please select a category');
                isValid = false;
            } else {
                hideError('category-error');
            }

            const regularPrice = document.getElementById('regularPrice').value;
            const regularPriceNum = parseFloat(regularPrice);
            if (!regularPrice.trim()) {
                showError('regularPrice-error', 'Regular price is required');
                isValid = false;
            } else if (isNaN(regularPriceNum) || regularPriceNum <= 0) {
                showError('regularPrice-error', 'Regular price must be greater than 0');
                isValid = false;
            } else {
                hideError('regularPrice-error');
            }

            const salePrice = document.getElementById('salePrice').value;
            const salePriceNum = parseFloat(salePrice);
            if (salePrice.trim() && (isNaN(salePriceNum) || salePriceNum <= 0)) {
                showError('salePrice-error', 'Sale price must be greater than 0');
                isValid = false;
            } else {
                hideError('salePrice-error');
            }

            const quantity = document.getElementById('quantity').value;
            const quantityNum = parseInt(quantity);
            if (!quantity.trim()) {
                showError('quantity-error', 'Stock count is required');
                isValid = false;
            } else if (isNaN(quantityNum) || quantityNum < 0) {
                showError('quantity-error', 'Stock count cannot be negative');
                isValid = false;
            } else {
                hideError('quantity-error');
            }

            return isValid;
        }

        function showError(id, message) {
            const errorElement = document.getElementById(id);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function hideError(id) {
            document.getElementById(id).style.display = 'none';
        }

        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    </script>
</body>
</html>