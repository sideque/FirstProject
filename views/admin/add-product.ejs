<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Products</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
    <link rel="stylesheet" href="/css/sideBar.css">
    <style>
        body {
            background-color: #151521;
            color: #fff;
            overflow-x: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .main-content {
            margin-left: 20px;
            margin-right: 20px;
            padding: 20px;
            max-height: 100vh;
            overflow-y: auto;
        }
        
        .form-container {
            background-color: #222;
            border-radius: 8px;
            padding: 25px;
            max-width: 1000px;
            margin: 20px auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }
        
        .form-title {
            margin-bottom: 25px;
            color: #42b883;
            font-weight: 600;
        }
        
        .image-preview {
            width: 150px;
            height: 150px;
            background-color: #333;
            background-position: center;
            background-size: cover;
            background-repeat: no-repeat;
            border: 1px solid #444;
            margin-bottom: 15px;
            position: relative;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        
        .image-preview:hover {
            border-color: #42b883;
        }
        
        .image-preview:hover::after {
            content: "Click to crop";
            position: absolute;
            background: rgba(0,0,0,0.7);
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            border-radius: 4px;
        }
        
        .image-preview-empty::before {
            content: "+";
            font-size: 40px;
            color: #666;
        }
        
        .image-preview-container {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        
        .delivery-options {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 10px;
        }
        
        .delivery-option {
            background-color: #333;
            border: 1px solid #444;
            padding: 8px;
            text-align: center;
            border-radius: 4px;
        }
        
        .add-product-btn {
            background-color: #42b883;
            border: none;
            padding: 10px 24px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            margin-top: 20px;
            transition: all 0.3s;
            letter-spacing: 0.5px;
        }
        
        .add-product-btn:hover {
            background-color: #36a574;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .form-label {
            margin-bottom: 8px;
            font-size: 14px;
            color: #ccc;
            font-weight: 500;
        }
        
        .form-control {
            background-color: #333;
            border: 1px solid #444;
            color: white;
            padding: 10px 12px;
            transition: all 0.2s ease;
        }
        
        .form-control:focus {
            background-color: #3a3a3a;
            color: white;
            border-color: #42b883;
            box-shadow: 0 0 0 0.25rem rgba(66, 184, 131, 0.25);
        }
        
        .error-message {
            color: #ff6b6b;
            font-size: 12px;
            margin-top: 5px;
            display: none;
        }
        
        /* Modal Styles */
        .crop-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
        }
        
        .crop-modal-content {
            position: relative;
            background-color: #333;
            margin: 5% auto;
            padding: 20px;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        }
        
        .crop-container {
            width: 100%;
            height: 400px;
            margin-bottom: 20px;
            overflow: hidden;
            background-color: #222;
            border-radius: 4px;
        }
        
        .crop-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        .crop-btn {
            padding: 8px 16px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .crop-btn-cancel {
            background-color: #6c757d;
            color: white;
        }
        
        .crop-btn-cancel:hover {
            background-color: #5a6268;
        }
        
        .crop-btn-crop {
            background-color: #42b883;
            color: white;
        }
        
        .crop-btn-crop:hover {
            background-color: #36a574;
        }
        
        .close-modal {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 24px;
            color: #aaa;
            cursor: pointer;
            transition: color 0.2s ease;
        }
        
        .close-modal:hover {
            color: white;
        }
        
        .hidden-file-input {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            border: 0;
        }
        
        .alert-success {
            background-color: #42b883;
            color: white;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }
        
        .alert-success::before {
            content: "✓";
            font-size: 16px;
            margin-right: 10px;
            font-weight: bold;
        }
        
        .scroll-top-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            background-color: #42b883;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            z-index: 99;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }
        
        .scroll-top-btn:hover {
            background-color: #36a574;
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .image-wrapper {
            position: relative;
        }
        
        .delete-image-btn {
            position: absolute;
            top: -10px;
            right: -10px;
            background-color: #ff4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            z-index: 10;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .delete-image-btn:hover {
            background-color: #cc0000;
            transform: scale(1.1);
        }
        
        .section-title {
            color: #42b883;
            font-weight: 600;
            margin-top: 20px;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #333;
        }
        
        .helper-text {
            font-size: 12px;
            color: #999;
            margin-top: 5px;
        }
    </style>
</head>
<body>

    <%-include("../../views/partials/admin/product-sidebar")%> 
    
    <div class="main-content" id="mainContent">
        <div class="form-container">
            <h4 class="form-title">Edit Product</h4>
            
            <div id="successAlert" class="alert-success" style="display: none;">
                Product updated successfully!
            </div>
        
            <form action="/admin/editProduct" method="post" enctype="multipart/form-data" id="editProductForm">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="mb-3">
                            <label class="form-label">Product Images (Up to 3):</label>
                            <div class="image-preview-container">
                                <div class="image-wrapper">
                                    <div class="image-preview image-preview-empty" id="imagePreview0"></div>
                                    <button type="button" class="delete-image-btn" id="deleteBtn0">×</button>
                                </div>
                                
                                <div class="image-wrapper">
                                    <div class="image-preview image-preview-empty" id="imagePreview1"></div>
                                    <button type="button" class="delete-image-btn" id="deleteBtn1">×</button>
                                </div>
                                
                                <div class="image-wrapper">
                                    <div class="image-preview image-preview-empty" id="imagePreview2"></div>
                                    <button type="button" class="delete-image-btn" id="deleteBtn2">×</button>
                                </div>
                            </div>
                            
                            <input type="file" class="hidden-file-input" id="productImage0" name="images" 
                                accept="image/png, image/jpeg, image/jpg" onchange="handleFileSelect(event, 0)">
                            <input type="file" class="hidden-file-input" id="productImage1" name="images" 
                                accept="image/png, image/jpeg, image/jpg" onchange="handleFileSelect(event, 1)">
                            <input type="file" class="hidden-file-input" id="productImage2" name="images" 
                                accept="image/png, image/jpeg, image/jpg" onchange="handleFileSelect(event, 2)">
                            
                            <input type="hidden" id="croppedImage0" name="croppedImages">
                            <input type="hidden" id="croppedImage1" name="croppedImages">
                            <input type="hidden" id="croppedImage2" name="croppedImages">
                            
                            <input type="hidden" id="imagePositions" name="imagePositions" value="">
                            <input type="hidden" id="productId" name="productId" value="">
                            
                            <div id="images-error" class="error-message"></div>
                            <div class="mt-2">
                                <span class="helper-text">Click on any box to upload and crop image</span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name:</label>
                            <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter product name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="productDescription" class="form-label">Product Description:</label>
                            <textarea class="form-control" id="productDescription" name="productDescription" rows="3" placeholder="Enter product description"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="brand" class="form-label">Brand:</label>
                            <select class="form-control" id="brand" name="brand">
                                <option value="">Select Brand</option>
                                <option value="apple">Apple</option>
                                <option value="dell">Dell</option>
                                <option value="hp">HP</option>
                                <option value="lenovo">Lenovo</option>
                                <option value="asus">Asus</option>
                                <option value="acer">Acer</option>
                                <option value="msi">MSI</option>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="productAmount" class="form-label">Regular Price:</label>
                            <input type="text" class="form-control" id="productAmount" name="productAmount" placeholder="0.00">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                         
                        <div class="mb-3">
                            <label for="category" class="form-label">Category:</label>
                            <select class="form-control" id="category" name="category">
                                <option value="">Select Category</option>
                                <option value="laptops">Budget Phones</option>
                                <option value="desktops">Mid-Range Phones</option>
                                <option value="gaming">Flagship Phones</option>
                                <option value="business">Gaming Phones</option>
                                <option value="ultrabooks">Foldable & Flip Phones</option>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="salePrice" class="form-label">Sale Price:</label>
                            <input type="text" class="form-control" id="salePrice" name="salePrice" placeholder="0.00">
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="stockCount" class="form-label">Stock Count:</label>
                            <input type="number" class="form-control" id="stockCount" name="stockCount" placeholder="0">
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="col-12">
                        <h5 class="section-title">Phone Specifications</h5>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="processor" class="form-label">Processor:</label>
                            <input type="text" class="form-control" id="processor" name="processor" placeholder="e.g. Snapdragon 8 Gen 2, Apple A17 Bionic">
                            <div id="processor-error" class="error-message"></div>
                        </div>

                        <div class="mb-3">
                            <label for="storage" class="form-label">Storage:</label>
                            <input type="text" class="form-control" id="storage" name="storage" placeholder="e.g. 128GB UFS 3.1">
                            <div id="storage-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="ram" class="form-label">RAM:</label>
                            <input type="text" class="form-control" id="ram" name="ram" placeholder="e.g. 8GB LPDDR5X">
                            <div id="ram-error" class="error-message"></div>
                        </div>

                        <div class="mb-3">
                            <label for="graphicsCard" class="form-label">Camera:</label>
                            <input type="text" class="form-control" id="graphicsCard" name="graphicsCard" placeholder="e.g. 50MP (Main) + 12MP (Ultra-wide)">
                            <div id="graphicsCard-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    <div class="col-12 text-end">
                        <button type="button" id="updateProductBtn" class="add-product-btn">UPDATE PRODUCT</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal for crop image -->
    <div id="cropModal" class="crop-modal">
        <div class="crop-modal-content">
            <span class="close-modal" onclick="closeCropModal()">×</span>
            <h5>Crop Image</h5>
            <div class="crop-container">
                <img id="cropImage" src="" alt="Image to crop">
            </div>
            <div class="crop-buttons">
                <button class="crop-btn crop-btn-cancel" onclick="closeCropModal()">Cancel</button>
                <button class="crop-btn crop-btn-crop" onclick="cropImage()">Crop</button>
            </div>
        </div>
    </div>
    
    <button id="scrollTopBtn" class="scroll-top-btn" onclick="scrollToTop()">↑</button>
    
    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    
    <script>
        // Global variables
        let cropper;
        let currentImageIndex = -1;
        const previewElements = [
            document.getElementById('imagePreview0'),
            document.getElementById('imagePreview1'),
            document.getElementById('imagePreview2')
        ];
        const deleteButtons = [
            document.getElementById('deleteBtn0'),
            document.getElementById('deleteBtn1'),
            document.getElementById('deleteBtn2')
        ];
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Set up image preview click handlers
            previewElements.forEach((preview, index) => {
                preview.addEventListener('click', () => {
                    document.getElementById(`productImage${index}`).click();
                });
                
                // Initially hide delete buttons
                deleteButtons[index].style.display = 'none';
                
                // Set up delete button click handlers
                deleteButtons[index].addEventListener('click', (e) => {
                    e.stopPropagation();
                    deleteImage(index);
                });
            });
            
            // Set up scroll to top button
            window.addEventListener('scroll', function() {
                const scrollBtn = document.getElementById('scrollTopBtn');
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    scrollBtn.style.display = 'flex';
                } else {
                    scrollBtn.style.display = 'none';
                }
            });
            
            // Set up form submission
            document.getElementById('updateProductBtn').addEventListener('click', validateAndSubmit);
            
            // Load product data if editing
            loadProductData();
        });
        
        // Function to handle file selection
        function handleFileSelect(event, index) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.type.match('image.*')) {
                showError('images-error', 'Please select an image file (JPEG, JPG, or PNG)');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                // Open crop modal with selected image
                document.getElementById('cropImage').src = e.target.result;
                document.getElementById('cropModal').style.display = 'block';
                
                // Initialize cropper
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(document.getElementById('cropImage'), {
                    aspectRatio: 1,
                    viewMode: 1,
                    background: false,
                    zoomable: true,
                    cropBoxResizable: true
                });
                
                currentImageIndex = index;
            };
            
            reader.readAsDataURL(file);
        }
        
        // Function to crop the image
        function cropImage() {
            if (!cropper) return;
            
            const canvas = cropper.getCroppedCanvas({
                width: 300,
                height: 300
            });
            
            const croppedImageDataURL = canvas.toDataURL('image/jpeg');
            
            // Update preview
            previewElements[currentImageIndex].style.backgroundImage = `url('${croppedImageDataURL}')`;
            previewElements[currentImageIndex].classList.remove('image-preview-empty');
            
            // Store cropped image
            document.getElementById(`croppedImage${currentImageIndex}`).value = croppedImageDataURL;
            
            // Show delete button
            deleteButtons[currentImageIndex].style.display = 'flex';
            
            // Close modal
            closeCropModal();
        }
        
        // Function to close crop modal
        function closeCropModal() {
            document.getElementById('cropModal').style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }
        
        // Function to delete an image
        function deleteImage(index) {
            // Clear the preview
            previewElements[index].style.backgroundImage = '';
            previewElements[index].classList.add('image-preview-empty');
            
            // Clear the stored image
            document.getElementById(`croppedImage${index}`).value = '';
            
            // Hide delete button
            deleteButtons[index].style.display = 'none';
            
            // Reset file input
            document.getElementById(`productImage${index}`).value = '';
        }
        
        // Function to delete an existing image on the server
        function deleteSingleImage(imagePath, productId, index) {
            if (confirm('Are you sure you want to delete this image?')) {
                fetch(`/admin/deleteProductImage/${productId}/${imagePath}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear the preview
                        deleteImage(index);
                    } else {
                        alert('Failed to delete image');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the image');
                });
            }
        }
        
        // Function to validate form and submit
        function validateAndSubmit() {
            let isValid = true;
            
            // Validate product name
            const productName = document.getElementById('productName').value;
            if (!productName.trim()) {
                showError('productName-error', 'Product name is required');
                isValid = false;
            } else {
                hideError('productName-error');
            }
            
            // Validate description
            const description = document.getElementById('productDescription').value;
            if (!description.trim()) {
                showError('description-error', 'Product description is required');
                isValid = false;
            } else {
                hideError('description-error');
            }
            
            // Validate regular price
            const regularPrice = document.getElementById('productAmount').value;
            if (!regularPrice.trim() || isNaN(parseFloat(regularPrice))) {
                showError('regularPrice-error', 'Valid regular price is required');
                isValid = false;
            } else {
                hideError('regularPrice-error');
            }
            
            // Validate sale price (if provided)
            const salePrice = document.getElementById('salePrice').value;
            if (salePrice.trim() && isNaN(parseFloat(salePrice))) {
                showError('salePrice-error', 'Sale price must be a valid number');
                isValid = false;
            } else {
                hideError('salePrice-error');
            }
            
            // Validate stock count
            const quantity = document.getElementById('stockCount').value;
            if (!quantity.trim() || isNaN(parseInt(quantity))) {
                showError('quantity-error', 'Valid stock count is required');
                isValid = false;
            } else {
                hideError('quantity-error');
            }
            
            // If form is valid, submit
            if (isValid) {
                // For demonstration, show success message instead of actual submit
                document.getElementById('successAlert').style.display = 'block';
                setTimeout(() => {
                    document.getElementById('successAlert').style.display = 'none';
                }, 3000);
                
                // In a real implementation, you would submit the form:
                // document.getElementById('editProductForm').submit();
            } else {
                // Scroll to first error
                const firstError = document.querySelector('.error-message[style="display: block;"]');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        }
        
        // Function to show error message
        function showError(id, message) {
            const errorElement = document.getElementById(id);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
        
        // Function to hide error message
        function hideError(id) {
            document.getElementById(id).style.display = 'none';
        }
        
        // Function to scroll to top
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
        
        // Function to load product data (for editing)
        function loadProductData() {
            // Get product ID from URL or some other source
            const urlParams = new URLSearchParams(window.location.search);
            const productId = urlParams.get('id');
            
            if (productId) {
                document.getElementById('productId').value = productId;
                
                // In a real implementation, you would fetch product data:
                /*
                fetch(`/admin/getProduct/${productId}`)
                .then(response => response.json())
                .then(product => {
                    // Populate form fields
                    document.getElementById('productName').value = product.productName;
                    document.getElementById('productDescription').value = product.description;
                    document.getElementById('productAmount').value = product.regularPrice;
                    document.getElementById('salePrice').value = product.salePrice;
                    document.getElementById('stockCount').value = product.quantity;
                    document.getElementById('processor').value = product.processor;
                    document.getElementById('storage').value = product.storage;
                    document.getElementById('ram').value = product.ram;
                    document.getElementById('graphicsCard').value = product.graphicsCard;
                    
                    // Set selected options
                    setSelectedOption('brand', product.brand);
                    setSelectedOption('category', product.category);
                    
                    // Load images
                    if (product.productImage && product.productImage.length > 0) {
                        product.productImage.forEach((img, index) => {
                            if (index < 3) {
                                previewElements[index].style.backgroundImage = `url('${img}')`;
                                previewElements[index].classList.remove('image-preview-empty');
                                deleteButtons[index].style.display = 'flex';
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Error loading product:', error);
                });
                */
                
                // For demonstration, we'll load sample data
                setTimeout(() => {
                    // Sample data
                    const sampleProduct = {
                        productName: "Dell XPS 15",
                        description: "Premium 15-inch laptop with excellent performance and build quality.",
                        regularPrice: "1499.99",
                        salePrice: "1399.99",
                        quantity: "25",
                        processor: "Intel Core i7-12700H",
                        storage: "1TB SSD",
                        ram: "16GB DDR4",
                        graphicsCard: "NVIDIA RTX 3050Ti 4GB",
                        brand: "dell",
                        category: "ultrabooks"
                    };
                    
                    // Populate form fields
                    document.getElementById('productName').value = sampleProduct.productName;
                    document.getElementById('productDescription').value = sampleProduct.description;
                    document.getElementById('productAmount').value = sampleProduct.regularPrice;
                    document.getElementById('salePrice').value = sampleProduct.salePrice;
                    document.getElementById('stockCount').value = sampleProduct.quantity;
                    document.getElementById('processor').value = sampleProduct.processor;
                    document.getElementById('storage').value = sampleProduct.storage;
                    document.getElementById('ram').value = sampleProduct.ram;
                    document.getElementById('graphicsCard').value = sampleProduct.graphicsCard;
                    
                    // Set selected options
                    setSelectedOption('brand', sampleProduct.brand);
                    setSelectedOption('category', sampleProduct.category);
                    
                    // Simulate one loaded image
                    previewElements[0].style.backgroundImage = "url('/api/placeholder/300/300')";
                    previewElements[0].classList.remove('image-preview-empty');
                    deleteButtons[0].style.display = 'flex';
                }, 500);
            }
        }
        
        // Helper function to set selected option in dropdown