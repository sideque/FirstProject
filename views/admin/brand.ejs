<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MobiVault Brand</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/css/sideBar.css">
  <style>
    /* General styling */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #1E1E1E;
    color: #333;
}

.main-content {
    margin-left: 250px;
    margin-top: 60px;
    padding: 20px;
    transition: margin-left 0.3s;
}

h1 {
    margin-bottom: 20px;
    color: #fff;
}
.header-container {
      position: fixed;
      top: 20px;
      right: 30px;
      display: flex;
      align-items: center;
      gap: 20px;
      z-index: 90;
    }

    /* Search Bar */
    .search-container {
      position: relative;
      display: flex;
      align-items: center;
    }

    .search-input {
      background-color: #2A2A2A;
      border: 1px solid #333;
      border-radius: 20px;
      color: white;
      padding: 8px 15px 8px 40px;
      width: 250px;
      transition: all 0.3s ease;
    }

    .search-input:focus {
      outline: none;
      border-color: #9747FF;
      width: 280px;
      box-shadow: 0 0 5px rgba(151, 71, 255, 0.5);
    }

    .search-icon {
      position: absolute;
      left: 15px;
      color: #999;
      pointer-events: none;
    }

    /* Admin Profile */
    .admin-profile {
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      padding: 5px;
      border-radius: 25px;
      transition: background-color 0.3s;
      background-color: #2A2A2A;
      padding: 5px 15px;
      margin-bottom: 15px;
      border-radius: 30px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .admin-profile:hover {
      background-color: #2A2A2A;
    }

    .admin-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      overflow: hidden;
      background-color: #333;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid #4778FF;
      margin-right: 10px;
    }

    .admin-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .admin-name {
      font-size: 14px;
      font-weight: 500;
      color: white;
      white-space: nowrap;
    }
/* Table styling */
.data-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
    background-color: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    overflow: hidden;
}

.data-table th {
    background-color: #4a6da7;
    color: white;
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
}

.data-table td {
    padding: 10px 15px;
    border-bottom: 1px solid #ddd;
}

.data-table tr:last-child td {
    border-bottom: none;
}

.data-table tr:hover {
    background-color: #f9f9f9;
}

/* Button styling */
.action-btn {
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    text-transform: uppercase;
    font-size: 12px;
    transition: background-color 0.3s;
}

.block-btn {
    background-color: #e74c3c;
}

.block-btn:hover {
    background-color: #c0392b;
}

.unblock-btn {
    background-color: #2ecc71;
}

.unblock-btn:hover {
    background-color: #27ae60;
}

.action-btn a {
    color: white;
    text-decoration: none;
    display: block;
}

/* Search container */
.search-container {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    margin-left: 250px;
    padding: 10px 20px;
}

.search-icon {
    margin-right: 10px;
    margin-left: 15px;
    color: #ccc;
}

/* Brands styling */
.brands-container {
    background-color: #2a2a2a;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
}

.brands-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.brands-title {
    font-size: 24px;
    font-weight: bold;
    color: #fff;
}

.add-button {
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px 15px;
    font-size: 16px;
    cursor: pointer;
}

.brands-table {
    width: 100%;
    border-collapse: collapse;
}

.brands-table th {
    text-align: left;
    padding: 10px;
    border-bottom: 1px solid #444;
    font-weight: normal;
    color: #fff;
}

.brands-table td {
    padding: 10px;
    border-bottom: 1px solid #444;
    color: #fff;
}

.brands-description {
    color: #ccc;
}

.actions-column {
    text-align: right;
}

/* Pagination styling */
.pagination-container {
    margin-top: 20px;
    text-align: center;
}

.pagination-container a,
.pagination-container span {
    display: inline-block;
    padding: 8px 12px;
    margin: 0 4px;
    color: #fff;
    text-decoration: none;
    border-radius: 4px;
}

.pagination-container a {
    background-color: #4a6da7;
}

.pagination-container a:hover {
    background-color: #385785;
}

.pagination-container .current-page {
    background-color: #2ecc71;
    font-weight: bold;
}

.delete-btn a {
    background-color: #e74c3c; /* red */
    color: white;
}

th.actions-column {
    /* Replace the fixed padding with text alignment */
    padding-left: 0; 
    text-align: center;
    width: 25%; /* Set a reasonable width */
}

.actions-column {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: flex-start;
}

.action-btn {
    margin: 2px;
    min-width: 80px; /* Make all buttons same minimum width */
}

.action-btn a {
    color: white;
    text-decoration: none;
    display: block;
    width: 100%;
    height: 100%;
}


/* Responsive Styles */
@media (max-width: 992px) {
    .sidebar {
        width: 200px;
    }
    .main-content {
        margin-left: 200px;
    }
    .search-container {
        margin-left: 200px;
    }
}

@media (max-width: 768px) {
    .main-content {
        margin-left: 60px;
    }
    .data-table {
        font-size: 14px;
    }
    .data-table th, .data-table td {
        padding: 8px 10px;
    }
    .action-btn {
        padding: 6px 8px;
        font-size: 11px;
    }
    .search-input {
        width: 200px;
      }
      
      .search-input:focus {
        width: 220px;
      }
}

@media (max-width: 480px) {
   
    .main-content {
        margin-left: 0;
    }

    .header-container {
        position: static;
        justify-content: space-between;
        padding: 10px;
        width: 100%;
        box-sizing: border-box;
      }
      
      .search-container {
        width: 70%;
      }
      
      .search-input {
        width: 100%;
      }
      
      .search-input:focus {
        width: 100%;
      }
   
}
  </style>
</head>
<body>
  <!-- Sidebar Navigation -->
  <%-include("../../views/partials/admin/brand-sidebar")%> 
  <div class="main-content">
    <div class="header-container">
        <!-- Search -->
        <div class="search-container">
          <i class="fas fa-search search-icon"></i>
          <input type="text" class="search-input" placeholder="Search...">
        </div>
  
        <!-- Admin Profile Dropdown -->
        <div class="admin-profile dropdown">
          <div class="admin-avatar" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://i.pravatar.cc/150?img=12" alt="Admin">
          </div>
          <div class="admin-name">Admin User</div>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
            <li><h6 class="dropdown-header">Admin User</h6></li>
            <!-- <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i> Profile</a></li> -->
            <!-- <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i> Settings</a></li> -->
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="/admin/logout"><i class="fas fa-sign-out-alt me-2"></i> Logout</a></li>
          </ul>
        </div>
      </div>
    <!-- Brands container -->
    <div class="brands-container">
        <div class="brands-header">
            <div class="brands-title">Brands</div>
            <button class="add-button"><a href="/admin/add-brand" style="color: white; text-decoration: none;">ADD Brands +</a></button>
        </div>

        <table class="brands-table">
            <thead>
                <tr>
                    <th>NO</th>
                    <th>BRANDS</th>
                    <th>BRAND DESCRIPTION</th>
                    <th>OFFER PERCENTAGE</th>
                    <th class="actions-column">ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                <% if (Array.isArray(brands) && brands.length > 0) { %>
                    <% brands.forEach((brand, index) => { %>
                        <tr>
                            <td><%= (currentPage - 1) * 4 + index + 1 %></td>
                            <td class="brand-name"><%= brand.name %></td>
                            <td class="brand-description"><%= brand.description %></td>
                            <td>
                                <%= brand.brandOffer ? `${brand.brandOffer}%` : '0%' %>
                            </td>
                            <td class="actions-column">
                                <!-- <button class="action-btn <%= brand.brandOffer ? 'unblock-btn' : 'block-btn' %>">
                                    <a href="#" onclick="addOffer('<%= brand._id %>')">
                                        <%= brand.brandOffer ? 'Update Offer' : 'Add Offer' %>
                                    </a>
                                </button>
                                <% if(brand.brandOffer > 0) { %>
                                    <button class="action-btn unblock-btn">
                                        <a href="#" onclick="removeOffer('<%= brand._id %>')">Remove Offer</a>
                                    </button>
                                <% } %> -->
                                <% if (brand.isListed) { %>
                                    <button class="action-btn block-btn">
                                        <a href="/admin/listBrand?id=<%= brand._id %>">Unlist</a>
                                    </button>
                                <% } else { %>
                                    <button class="action-btn unblock-btn">
                                        <a href="/admin/unlistBrand?id=<%= brand._id %>">List</a>
                                    </button>
                                <% } %>
                                <button class="action-btn" style="background-color: #4a6da7;">
                                    <a href="/admin/edit-brand/<%= brand._id %>">Edit</a>
                                </button>
                                <button class="action-btn block-btn">
                                    <a href="#" onclick="deleteBrand('<%= brand._id %>')">Delete</a>
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="5">No brands available</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
<div class="pagination-container">
    <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>" class="page-link">&laquo; Previous</a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
        <% if (i === currentPage) { %>
            <span class="current-page"><%= i %></span> <!-- Highlight current page -->
        <% } else { %>
            <a href="?page=<%= i %>" class="page-link"><%= i %></a> <!-- Regular page link -->
        <% } %>
    <% } %>

    <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>" class="page-link">Next &raquo;</a>
    <% } %>
</div>

  </div>

  <script>

    async function addOffer(brandId) {
    try {
        // Prompt for percentage
        const {value: amount, dismiss} = await Swal.fire({
            title: "Offer in percentage",
            input: "number",
            inputLabel: "Percentage",
            inputPlaceholder: "%",
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'Please enter a percentage value';
                }
                if (value < 0 || value > 100) {
                    return 'Percentage must be between 0 and 100';
                }
            }
        });
        
        // Check if user cancelled the dialog
        if (dismiss === Swal.DismissReason.cancel || amount === undefined) {
            return;
        }
        
        // Show loading indicator
        Swal.fire({
            title: 'Processing...',
            text: 'Adding brand offer',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });
        
        // Make API request
        const response = await fetch("/admin/addBrandOffer", {
            method: "POST",
            headers: {
                'Content-Type': "application/json",
            },
            body: JSON.stringify({
                percentage: amount,
                brandId: brandId,
            }),
        });
        
        // Check for non-JSON responses first
        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
            throw new Error(`Server returned non-JSON response: ${await response.text()}`);
        }
        
        const data = await response.json();
        
        if (response.ok && data.status === true) {
            Swal.fire(
                "Offer added",
                "The offer has been added",
                "success"
            ).then(() => {
                location.reload();
            });
        } else {
            Swal.fire(
                "Failed",
                data.message || "Adding offer failed",
                "error"
            );
        }
    } catch (error) {
        console.error("Error adding offer:", error);
        
        Swal.fire(
            "Error",
            "An error occurred while adding the offer. Please check console for details.",
            "error"
        );
    }
}


    async function removeOffer(brandId) {
        try {

            const response = await fetch("/admin/removeBrandOffer",{
                method:"POST",
                headers:{
                    "content-type" : "application/json",
                },
                body:JSON.stringify({
                    brandId:brandId,
                })
            })

            const data = await response.json();

            if(response.ok && data.status === true){
                Swal.fire(
                    "Offer removed",
                    "The offer has been removed",
                    "success"
                ).then(()=>{
                    location.reload();
                });
            }else{
                Swal.fire("Failed",data.message || "Removing offer failed","error");
            }

        } catch (error) {

            Swal.fire(
                "Error",
                "An error occured while removing the offer",
                "error"
            );

            console.error("Error removing offer",error);

        }
    }

    async function deleteBrand(brandId) {
    try {
        // First check if category has products
        const response = await fetch(`/admin/brand-has-products/${brandId}`);
        const data = await response.json();
        
        if (data.hasProducts) {
            // Ask what to do with products
            const { value: action } = await Swal.fire({
                title: 'Delete Brand',
                html: `This brand has ${data.count} associated product(s). What would you like to do?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Delete anyway',
                input: 'radio',
                inputOptions: {
                    'delete': 'Delete all associated products',
                    'reassign': 'Reassign products to another brand'
                },
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to choose an option!';
                    }
                }
            });
            
            if (!action) return;
            
            if (action === 'reassign') {
                // Get available brands
                const catResponse = await fetch('/admin/get-brands');
                const catData = await catResponse.json();
                
                if (!catData.success || catData.brands.length === 0) {
                    return Swal.fire('Error', 'No other brands available for reassignment', 'error');
                }
                
                // Create options for select dropdown
                const brandOptions = {};
                catData.brands.forEach(cat => {
                    brandOptions[cat._id] = cat.name;
                });
                
                // Ask which brand to reassign to
                const { value: targetBrandId } = await Swal.fire({
                    title: 'Select Target Brand',
                    input: 'select',
                    inputOptions: brandOptions,
                    inputPlaceholder: 'Select a brand',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to select a brand!';
                        }
                    }
                });
                
                if (!targetBrandId) return;
                
                // Perform deletion with reassignment
                const deleteResponse = await fetch(`/admin/delete-brand/${brandId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fallbackCategory: targetBrandId,
                        deleteProducts: false
                    })
                });
                
                const deleteResult = await deleteResponse.json();
                
                if (deleteResult.success) {
                    Swal.fire('Deleted!', 'Brand deleted and products reassigned successfully.', 'success')
                    .then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', deleteResult.message || 'Failed to delete brand', 'error');
                }
            } else {
                // Confirm deletion with products
                const confirmResult = await Swal.fire({
                    title: 'Are you sure?',
                    text: `This will permanently delete the brand and all ${data.count} associated product(s)!`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete everything!'
                });
                
                if (!confirmResult.isConfirmed) return;
                
                // Perform deletion with product deletion
                const deleteResponse = await fetch(`/admin/delete-brand/${brandId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        deleteProducts: true
                    })
                });
                
                const deleteResult = await deleteResponse.json();
                
                if (deleteResult.success) {
                    Swal.fire('Deleted!', 'Brand and all associated products deleted successfully.', 'success')
                    .then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', deleteResult.message || 'Failed to delete brand', 'error');
                }
            }
        } else {
            // Simple confirmation for category with no products
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "You want to delete this brand?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            });
            
            if (!result.isConfirmed) return;
            
            // Perform simple deletion
            const deleteResponse = await fetch(`/admin/delete-brand/${brandId}`, {
                method: 'DELETE'
            });
            
            // Check if the response is JSON
            const contentType = deleteResponse.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const deleteResult = await deleteResponse.json();
                
                if (deleteResult.success) {
                    Swal.fire('Deleted!', 'Brand deleted successfully.', 'success')
                    .then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', deleteResult.message || 'Failed to delete brand', 'error');
                }
            } else {
                // Handle non-JSON response (redirect)
                location.reload();
            }
        }
    } catch (error) {
        console.error('Error in delete process:', error);
        Swal.fire('Error', 'An unexpected error occurred', 'error');
    }
}

  </script>
</body>
</html>